From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Thu, 27 Jan 2022 12:31:40 +1000
Subject: [PATCH] Use CompletableFuture-based chunk IO


diff --git a/src/main/java/com/destroystokyo/paper/io/PaperFileIOThread.java b/src/main/java/com/destroystokyo/paper/io/PaperFileIOThread.java
index 7c89a96d54641904e2d4562fe28c59deecfb5444..9998c80955585de9668a63610d23d3095b4ffa5a 100644
--- a/src/main/java/com/destroystokyo/paper/io/PaperFileIOThread.java
+++ b/src/main/java/com/destroystokyo/paper/io/PaperFileIOThread.java
@@ -6,6 +6,7 @@ import net.minecraft.server.level.ServerLevel;
 import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.chunk.storage.RegionFile;
 import org.slf4j.Logger;
+import puregero.multipaper.MultiPaperIO;
 
 import java.io.IOException;
 import java.util.concurrent.CompletableFuture;
@@ -42,7 +43,7 @@ public final class PaperFileIOThread extends QueueExecutorThread {
 
     public static final class Holder {
 
-        public static final PaperFileIOThread INSTANCE = new PaperFileIOThread();
+        public static final MultiPaperIO INSTANCE = new MultiPaperIO(); // MultiPaper - Use completable futures instead of a worker thread
 
         static {
             INSTANCE.start();
diff --git a/src/main/java/puregero/multipaper/ChunkKey.java b/src/main/java/puregero/multipaper/ChunkKey.java
index d139536be7ab15293b798af115e71a8dbe4a2f3d..928fe46b5061ff6a1acbec61eec698756e8ac124 100644
--- a/src/main/java/puregero/multipaper/ChunkKey.java
+++ b/src/main/java/puregero/multipaper/ChunkKey.java
@@ -30,5 +30,17 @@ public class ChunkKey {
 
         return name.hashCode() ^ i ^ j;
     }
+
+    public String getWorld() {
+        return name;
+    }
+
+    public int getX() {
+        return x;
+    }
+
+    public int getZ() {
+        return z;
+    }
 }
 
diff --git a/src/main/java/puregero/multipaper/MultiPaperIO.java b/src/main/java/puregero/multipaper/MultiPaperIO.java
new file mode 100644
index 0000000000000000000000000000000000000000..e0bbc5f5a443ed473199bb8ba3ec13b02fa98ffc
--- /dev/null
+++ b/src/main/java/puregero/multipaper/MultiPaperIO.java
@@ -0,0 +1,145 @@
+package puregero.multipaper;
+
+import com.destroystokyo.paper.io.PaperFileIOThread;
+import net.minecraft.nbt.CompoundTag;
+import net.minecraft.nbt.NbtIo;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.level.ServerLevel;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+import java.io.IOException;
+import java.util.Set;
+import java.util.concurrent.CompletableFuture;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.TimeUnit;
+import java.util.function.Consumer;
+
+public class MultiPaperIO extends Thread {
+    private static final Logger LOGGER = LogManager.getLogger(MultiPaperIO.class.getSimpleName());
+
+    private final ConcurrentHashMap<ChunkKey, CompletableFuture<CompoundTag>> chunkReadsInProgress = new ConcurrentHashMap<>();
+    private final ConcurrentHashMap<ChunkKey, CompletableFuture<CompoundTag>> poiReadsInProgress = new ConcurrentHashMap<>();
+    private final Set<CompletableFuture<Void>> writesInProgress = ConcurrentHashMap.newKeySet();
+
+    public void scheduleSave(ServerLevel world, int chunkX, int chunkZ, CompoundTag poiData, CompoundTag chunkData, int priority) {
+        if (poiData != null) {
+            writeAsync(() -> {
+                try {
+                    MultiPaper.writeRegionFileNBT(world.convertable.getLevelId(), "poi", chunkX, chunkZ, poiData);
+                } catch (IOException e) {
+                    throw new RuntimeException(e);
+                }
+            });
+        }
+
+        if (chunkData != null) {
+            writeAsync(() -> {
+                try {
+                    MultiPaper.writeRegionFileNBT(world.convertable.getLevelId(), "region", chunkX, chunkZ, chunkData);
+                } catch (IOException e) {
+                    throw new RuntimeException(e);
+                }
+            });
+        }
+    }
+
+    private void writeAsync(Runnable runnable) {
+        CompletableFuture<Void> future = CompletableFuture.runAsync(runnable);
+        writesInProgress.add(future);
+        future.whenComplete((_void, throwable) -> writesInProgress.remove(future));
+    }
+
+    public CompletableFuture<PaperFileIOThread.ChunkData> loadChunkDataAsyncFuture(final ServerLevel world, final int chunkX, final int chunkZ,
+                                                                                   final int priority, final boolean readPoiData, final boolean readChunkData,
+                                                                                   final boolean intendingToBlock) {
+        final CompletableFuture<PaperFileIOThread.ChunkData> future = new CompletableFuture<>();
+        PaperFileIOThread.ChunkData chunkData = new PaperFileIOThread.ChunkData();
+
+        CompletableFuture.allOf(
+                readPoiData ? readPoi(world, chunkX, chunkZ).thenAccept(poi -> chunkData.poiData = poi) : CompletableFuture.completedFuture(null),
+                readChunkData ? readChunk(world, chunkX, chunkZ).thenAccept(chunk -> chunkData.chunkData = chunk) : CompletableFuture.completedFuture(null)
+        ).thenRun(() -> future.complete(chunkData));
+
+        return future;
+    }
+
+    public void loadChunkDataAsync(final ServerLevel world, final int chunkX, final int chunkZ,
+                                   final int priority, final Consumer<PaperFileIOThread.ChunkData> onComplete,
+                                   final boolean readPoiData, final boolean readChunkData,
+                                   final boolean intendingToBlock) {
+        loadChunkDataAsyncFuture(world, chunkX, chunkZ, priority, readPoiData, readChunkData, intendingToBlock).thenAccept(onComplete);
+    }
+
+    public PaperFileIOThread.ChunkData loadChunkData(final ServerLevel world, final int chunkX, final int chunkZ, final int priority,
+                                                     final boolean readPoiData, final boolean readChunkData) {
+        return this.loadChunkDataAsyncFuture(world, chunkX, chunkZ, priority, readPoiData, readChunkData, true).join();
+    }
+
+    private CompletableFuture<CompoundTag> readChunk(final ServerLevel world, final int chunkX, final int chunkZ) {
+        ChunkKey key = new ChunkKey(world.convertable.getLevelId(), chunkX, chunkZ);
+        CompletableFuture<CompoundTag> future = chunkReadsInProgress.computeIfAbsent(key, key2 -> readChunk(key2, "region"));
+        future.whenComplete((tag, throwable) -> chunkReadsInProgress.remove(key, future));
+        return future;
+    }
+
+    private CompletableFuture<CompoundTag> readPoi(final ServerLevel world, final int chunkX, final int chunkZ) {
+        ChunkKey key = new ChunkKey(world.convertable.getLevelId(), chunkX, chunkZ);
+        CompletableFuture<CompoundTag> future = poiReadsInProgress.computeIfAbsent(key, key2 -> readChunk(key2, "poi"));
+        future.whenComplete((tag, throwable) -> poiReadsInProgress.remove(key, future));
+        return future;
+    }
+
+    private CompletableFuture<CompoundTag> readChunk(final ChunkKey key, final String path) {
+        CompletableFuture<CompoundTag> future = MultiPaper.readRegionFileAsync(key.getWorld(), path, key.getX(), key.getZ())
+                .thenApplyAsync(in -> {
+                    try {
+                        return in == null ? null : NbtIo.read(in);
+                    } catch (IOException e) {
+                        throw new RuntimeException(e);
+                    }
+                }).exceptionally(exception -> {
+                    exception.printStackTrace();
+                    return PaperFileIOThread.FAILURE_VALUE;
+                });
+
+        future.thenApply(nbt -> false).completeOnTimeout(true, 15, TimeUnit.SECONDS).thenAccept(timedout -> {
+            if (timedout) {
+                LOGGER.warn("Timed out reading " + key.getWorld() + "," + path + "," + key.getX() + "," + key.getZ() + ", retrying...");
+                readChunk(key, path).thenAccept(future::complete);
+            }
+        });
+
+        return future;
+    }
+
+    public void start() {
+        // Do nothing, this isn't a worker thread
+    }
+
+    public void queueTask(PaperFileIOThread.ChunkDataTask chunkDataTask) {
+        // Do nothing, this isn't a worker thread
+    }
+
+    public void bumpPriority(ServerLevel world, int chunkX, int chunkZ, int priority) {
+        // Do nothing, we don't have priorities
+    }
+
+    public void setPriority(ServerLevel world, int chunkX, int chunkZ, int priority) {
+        // Do nothing, we don't have priorities
+    }
+
+    public void flush() {
+        while (!writesInProgress.isEmpty()) {
+            for (CompletableFuture<Void> future : writesInProgress) {
+                MinecraftServer.getServer().managedBlock(future::isDone);
+            }
+        }
+    }
+
+    public void close(boolean wait, boolean killQueue) {
+        if (wait) {
+            flush();
+        }
+    }
+}
