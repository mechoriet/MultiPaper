From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Tue, 8 Mar 2022 00:20:58 +1000
Subject: [PATCH] Destroy blocks on external servers


diff --git a/src/main/java/net/minecraft/server/level/ServerPlayerGameMode.java b/src/main/java/net/minecraft/server/level/ServerPlayerGameMode.java
index 7572f6d03d315ab4639be211c5ffc7682b326362..03d5db7dfb8d04722312b70e92be3ebb6af9c065 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayerGameMode.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayerGameMode.java
@@ -44,6 +44,9 @@ import org.bukkit.event.Event;
 import org.bukkit.event.block.Action;
 import org.bukkit.event.player.PlayerGameModeChangeEvent;
 import org.bukkit.event.player.PlayerInteractEvent;
+import puregero.multipaper.MultiPaper;
+import puregero.multipaper.externalserverprotocol.DestroyAndAckPacket;
+import puregero.multipaper.externalserverprotocol.DestroyBlockPacket;
 // CraftBukkit end
 
 public class ServerPlayerGameMode {
@@ -329,6 +332,12 @@ public class ServerPlayerGameMode {
     }
 
     public void destroyAndAck(BlockPos pos, int sequence, String reason) {
+        // MultiPaper start
+        if (MultiPaper.isChunkExternal(this.level.getChunkIfLoaded(pos))) {
+            this.level.getChunkIfLoaded(pos).externalOwner.getConnection().send(new DestroyAndAckPacket(player, pos, ServerboundPlayerActionPacket.Action.STOP_DESTROY_BLOCK, reason));
+            return;
+        }
+        // MultiPaper end
         if (this.destroyBlock(pos)) {
             this.debugLogging(pos, true, sequence, reason);
         } else {
@@ -339,6 +348,12 @@ public class ServerPlayerGameMode {
     }
 
     public boolean destroyBlock(BlockPos pos) {
+        // MultiPaper start
+        if (MultiPaper.isChunkExternal(this.level.getChunkIfLoaded(pos))) {
+            this.level.getChunkIfLoaded(pos).externalOwner.getConnection().send(new DestroyBlockPacket(player, pos));
+            return false;
+        }
+        // MultiPaper end
         BlockState iblockdata = this.level.getBlockState(pos);
         // CraftBukkit start - fire BlockBreakEvent
         org.bukkit.block.Block bblock = CraftBlock.at(level, pos);
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/DestroyAndAckPacket.java b/src/main/java/puregero/multipaper/externalserverprotocol/DestroyAndAckPacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..de3ceaacdbec84679dd7dfa101cf2a70b218b115
--- /dev/null
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/DestroyAndAckPacket.java
@@ -0,0 +1,59 @@
+package puregero.multipaper.externalserverprotocol;
+
+import net.minecraft.core.BlockPos;
+import net.minecraft.network.FriendlyByteBuf;
+import net.minecraft.network.protocol.game.ServerboundPlayerActionPacket;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.level.ServerPlayer;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import puregero.multipaper.ExternalServerConnection;
+import puregero.multipaper.MultiPaper;
+
+import java.util.UUID;
+
+public class DestroyAndAckPacket extends ExternalServerPacket {
+
+    private static final Logger LOGGER = LogManager.getLogger(DestroyAndAckPacket.class.getSimpleName());
+
+    private final UUID uuid;
+    private final BlockPos pos;
+    private final ServerboundPlayerActionPacket.Action action;
+    private final String reason;
+
+    public DestroyAndAckPacket(ServerPlayer player, BlockPos pos, ServerboundPlayerActionPacket.Action action, String reason) {
+        this.uuid = player.getUUID();
+        this.pos = pos;
+        this.action = action;
+        this.reason = reason;
+    }
+
+    public DestroyAndAckPacket(FriendlyByteBuf in) {
+        uuid = in.readUUID();
+        pos = in.readBlockPos();
+        action = in.readEnum(ServerboundPlayerActionPacket.Action.class);
+        reason = in.readUtf();
+    }
+
+    @Override
+    public void write(FriendlyByteBuf out) {
+        out.writeUUID(uuid);
+        out.writeBlockPos(pos);
+        out.writeEnum(action);
+        out.writeUtf(reason);
+    }
+
+    @Override
+    public void handle(ExternalServerConnection connection) {
+        MultiPaper.runSync(() -> {
+            ServerPlayer player = MinecraftServer.getServer().getPlayerList().getPlayer(uuid);
+
+            if (player == null) {
+                LOGGER.warn(uuid + " tried to break a block but they aren't online!");
+                return;
+            }
+
+            player.gameMode.destroyAndAck(pos, action.ordinal(), reason);
+        });
+    }
+}
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/DestroyBlockPacket.java b/src/main/java/puregero/multipaper/externalserverprotocol/DestroyBlockPacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..80dce0ee6c0877605c2ab2ae25de12bfebbd1994
--- /dev/null
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/DestroyBlockPacket.java
@@ -0,0 +1,50 @@
+package puregero.multipaper.externalserverprotocol;
+
+import net.minecraft.core.BlockPos;
+import net.minecraft.network.FriendlyByteBuf;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.level.ServerPlayer;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import puregero.multipaper.ExternalServerConnection;
+import puregero.multipaper.MultiPaper;
+
+import java.util.UUID;
+
+public class DestroyBlockPacket extends ExternalServerPacket {
+
+    private static final Logger LOGGER = LogManager.getLogger(DestroyBlockPacket.class.getSimpleName());
+
+    private final UUID uuid;
+    private final BlockPos pos;
+
+    public DestroyBlockPacket(ServerPlayer player, BlockPos pos) {
+        this.uuid = player.getUUID();
+        this.pos = pos;
+    }
+
+    public DestroyBlockPacket(FriendlyByteBuf in) {
+        uuid = in.readUUID();
+        pos = in.readBlockPos();
+    }
+
+    @Override
+    public void write(FriendlyByteBuf out) {
+        out.writeUUID(uuid);
+        out.writeBlockPos(pos);
+    }
+
+    @Override
+    public void handle(ExternalServerConnection connection) {
+        MultiPaper.runSync(() -> {
+            ServerPlayer player = MinecraftServer.getServer().getPlayerList().getPlayer(uuid);
+
+            if (player == null) {
+                LOGGER.warn(uuid + " tried to break a block but they aren't online!");
+                return;
+            }
+
+            player.gameMode.destroyBlock(pos);
+        });
+    }
+}
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java b/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java
index d113d6110bea32d086201feb4198772808b7d2ff..854876e4233e43b37b45fd5f3f392b52745d468d 100644
--- a/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java
@@ -64,6 +64,8 @@ public class ExternalServerPacketSerializer {
         addPacket(SpawnUpdatePacket.class, SpawnUpdatePacket::new);
         addPacket(ScoreboardUpdatePacket.class, ScoreboardUpdatePacket::new);
         addPacket(WhitelistTogglePacket.class, WhitelistTogglePacket::new);
+        addPacket(DestroyBlockPacket.class, DestroyBlockPacket::new);
+        addPacket(DestroyAndAckPacket.class, DestroyAndAckPacket::new);
     }
 
     private static void addPacket(Class<? extends ExternalServerPacket> clazz, Function<FriendlyByteBuf, ExternalServerPacket> deserializer) {
