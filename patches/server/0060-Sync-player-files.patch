From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Thu, 25 Nov 2021 17:43:58 +1000
Subject: [PATCH] Sync player files


diff --git a/src/main/java/net/minecraft/server/PlayerAdvancements.java b/src/main/java/net/minecraft/server/PlayerAdvancements.java
index de0513b38e5fa0138f1cee6bb633561be12449fc..0be3940d2b1b401d052ee5c883c04dee242ddb3b 100644
--- a/src/main/java/net/minecraft/server/PlayerAdvancements.java
+++ b/src/main/java/net/minecraft/server/PlayerAdvancements.java
@@ -50,6 +50,8 @@ import net.minecraft.server.players.PlayerList;
 import net.minecraft.util.datafix.DataFixTypes;
 import net.minecraft.world.level.GameRules;
 import org.slf4j.Logger;
+import puregero.multipaper.ExternalPlayer;
+import puregero.multipaper.MultiPaper;
 
 public class PlayerAdvancements {
 
@@ -155,9 +157,13 @@ public class PlayerAdvancements {
     }
 
     private void load(ServerAdvancementManager advancementLoader) {
-        if (this.file.isFile()) {
+        // MultiPaper start
+        String json = ExternalPlayer.loadedAdvancements.remove(player.getUUID());
+        if (json == null) json = MultiPaper.readAdvancements(player.server.storageSource.getLevelId(), player.getStringUUID());
+        if ((json != null && !json.isEmpty()) || this.file.isFile()) {
+        // MultiPaper end
             try {
-                JsonReader jsonreader = new JsonReader(new StringReader(Files.toString(this.file, StandardCharsets.UTF_8)));
+                JsonReader jsonreader = new JsonReader(new StringReader(json)); // MultiPaper
 
                 try {
                     jsonreader.setLenient(false);
@@ -215,8 +221,9 @@ public class PlayerAdvancements {
         this.registerListeners(advancementLoader);
     }
 
-    public void save() {
-        if (org.spigotmc.SpigotConfig.disableAdvancementSaving) return; // Spigot
+
+    // MultiPaper start - create generateJson() from save()
+    public JsonElement generateJson() {
         Map<ResourceLocation, AdvancementProgress> map = Maps.newHashMap();
         Iterator iterator = this.advancements.entrySet().iterator();
 
@@ -237,7 +244,22 @@ public class PlayerAdvancements {
 
         jsonelement.getAsJsonObject().addProperty("DataVersion", SharedConstants.getCurrentVersion().getWorldVersion());
 
+        return jsonelement;
+    }
+
+    public void save() {
+        if (org.spigotmc.SpigotConfig.disableAdvancementSaving) return; // Spigot
+        JsonElement jsonelement = generateJson();
+        // MultiPaper end
+
         try {
+            // MultiPaper start
+            if (true) {
+                MultiPaper.writeAdvancements(player.server.storageSource.getLevelId(), player.getStringUUID(), PlayerAdvancements.GSON.toJson(jsonelement));
+                return;
+            }
+            // MultiPaper end
+
             FileOutputStream fileoutputstream = new FileOutputStream(this.file);
 
             try {
diff --git a/src/main/java/net/minecraft/server/players/PlayerList.java b/src/main/java/net/minecraft/server/players/PlayerList.java
index de9ef4bc5b9f7709cab22a3577894c530822ef45..0079030700904d5f605167056cae78e2670d8600 100644
--- a/src/main/java/net/minecraft/server/players/PlayerList.java
+++ b/src/main/java/net/minecraft/server/players/PlayerList.java
@@ -604,6 +604,7 @@ public abstract class PlayerList {
         if (!player.getBukkitEntity().isPersistent()) return; // CraftBukkit
         if (!player.didPlayerJoinEvent) return; // Paper - If we never fired PJE, we disconnected during login. Data has not changed, and additionally, our saved vehicle is not loaded! If we save now, we will lose our vehicle (CraftBukkit bug)
         player.lastSave = MinecraftServer.currentTick; // Paper
+        if (MultiPaper.isExternalPlayer(player)) return; // MultiPaper
         this.playerIo.save(player);
         ServerStatsCounter serverstatisticmanager = (ServerStatsCounter) player.getStats(); // CraftBukkit
 
diff --git a/src/main/java/net/minecraft/stats/ServerStatsCounter.java b/src/main/java/net/minecraft/stats/ServerStatsCounter.java
index c59f98ca3adfdd90cdc5999aeadbb0834efedc0f..c6b4765ec39ec4a7e544b0131092ee2f732e6838 100644
--- a/src/main/java/net/minecraft/stats/ServerStatsCounter.java
+++ b/src/main/java/net/minecraft/stats/ServerStatsCounter.java
@@ -17,12 +17,9 @@ import it.unimi.dsi.fastutil.objects.ObjectIterator;
 import java.io.File;
 import java.io.IOException;
 import java.io.StringReader;
-import java.util.Iterator;
-import java.util.Map;
+import java.util.*;
 import java.util.Map.Entry;
-import java.util.Objects;
-import java.util.Optional;
-import java.util.Set;
+
 import net.minecraft.SharedConstants;
 import net.minecraft.Util;
 import net.minecraft.core.Registry;
@@ -36,6 +33,8 @@ import net.minecraft.util.datafix.DataFixTypes;
 import net.minecraft.world.entity.player.Player;
 import org.apache.commons.io.FileUtils;
 import org.slf4j.Logger;
+import puregero.multipaper.ExternalPlayer;
+import puregero.multipaper.MultiPaper;
 
 public class ServerStatsCounter extends StatsCounter {
 
@@ -53,6 +52,22 @@ public class ServerStatsCounter extends StatsCounter {
             Stat<ResourceLocation> wrapper = Stats.CUSTOM.get( entry.getKey() );
             this.stats.put( wrapper, entry.getValue().intValue() );
         }
+        // MultiPaper start
+        if (true) {
+            try {
+                String json = ExternalPlayer.loadedStats.remove(UUID.fromString(this.file.getName().split("\\.")[0]));
+                if (json == null) json = MultiPaper.readStats(server.storageSource.getLevelId(), this.file.getName().split("\\.")[0]);
+                if (!json.isEmpty()) {
+                    this.parseLocal(server.getFixerUpper(), json);
+                }
+            //} catch (IOException ioexception) {
+            //    ServerStatsCounter.LOGGER.error("Couldn't read statistics file {}", file, ioexception);
+            } catch (JsonParseException jsonparseexception) {
+                ServerStatsCounter.LOGGER.error("Couldn't parse statistics file {}", file, jsonparseexception);
+            }
+            return;
+        }
+        // MultiPaper end
         // Spigot end
         if (file.isFile()) {
             try {
@@ -69,6 +84,12 @@ public class ServerStatsCounter extends StatsCounter {
     public void save() {
         if ( org.spigotmc.SpigotConfig.disableStatSaving ) return; // Spigot
         try {
+            // MultiPaper start
+            if (true) {
+                MultiPaper.writeStats(server.storageSource.getLevelId(), this.file.getName().split("\\.")[0], this.toJson());
+                return;
+            }
+            // MultiPaper end
             FileUtils.writeStringToFile(this.file, this.toJson());
         } catch (IOException ioexception) {
             ServerStatsCounter.LOGGER.error("Couldn't save stats", ioexception);
@@ -201,7 +222,7 @@ public class ServerStatsCounter extends StatsCounter {
         return nbttagcompound;
     }
 
-    protected String toJson() {
+    public String toJson() { // MultiPaper - make public
         Map<StatType<?>, JsonObject> map = Maps.newHashMap();
         ObjectIterator objectiterator = this.stats.object2IntEntrySet().iterator();
 
diff --git a/src/main/java/net/minecraft/world/level/storage/PlayerDataStorage.java b/src/main/java/net/minecraft/world/level/storage/PlayerDataStorage.java
index 601f8099f74e81c17600566b3c9b7a6dd39c9bcb..97c10f3adc8d5c0fbad3cd8a00b2cf341c7a4705 100644
--- a/src/main/java/net/minecraft/world/level/storage/PlayerDataStorage.java
+++ b/src/main/java/net/minecraft/world/level/storage/PlayerDataStorage.java
@@ -17,15 +17,18 @@ import org.slf4j.Logger;
 import java.io.FileInputStream;
 import java.io.InputStream;
 import org.bukkit.craftbukkit.entity.CraftPlayer;
+import puregero.multipaper.MultiPaper;
 // CraftBukkit end
 
 public class PlayerDataStorage {
 
     private static final Logger LOGGER = LogUtils.getLogger();
     private final File playerDir;
+    private final LevelStorageSource.LevelStorageAccess session; // MultiPaper
     protected final DataFixer fixerUpper;
 
     public PlayerDataStorage(LevelStorageSource.LevelStorageAccess session, DataFixer dataFixer) {
+        this.session = session; // MultiPaper
         this.fixerUpper = dataFixer;
         this.playerDir = session.getLevelPath(LevelResource.PLAYER_DATA_DIR).toFile();
         this.playerDir.mkdirs();
@@ -35,6 +38,14 @@ public class PlayerDataStorage {
         if (org.spigotmc.SpigotConfig.disablePlayerDataSaving) return; // Spigot
         try {
             CompoundTag nbttagcompound = player.saveWithoutId(new CompoundTag());
+
+            // MultiPaper start
+            if (true) {
+                MultiPaper.writePlayer(session.getLevelId(), player.getStringUUID(), nbttagcompound);
+                return;
+            }
+            // MultiPaper end
+        
             File file = File.createTempFile(player.getStringUUID() + "-", ".dat", this.playerDir);
 
             NbtIo.writeCompressed(nbttagcompound, file);
@@ -53,6 +64,9 @@ public class PlayerDataStorage {
         CompoundTag nbttagcompound = null;
 
         try {
+            nbttagcompound = MultiPaper.readPlayer(session.getLevelId(), player.getStringUUID()); // MultiPaper
+
+            if (false) { // MultiPaper
             File file = new File(this.playerDir, player.getStringUUID() + ".dat");
             // Spigot Start
             boolean usingWrongFile = false;
@@ -76,11 +90,13 @@ public class PlayerDataStorage {
                 file.renameTo( new File( file.getPath() + ".offline-read" ) );
             }
             // Spigot End
+            } // MultiPaper
         } catch (Exception exception) {
             PlayerDataStorage.LOGGER.warn("Failed to load player data for {}", player.getName().getString());
         }
 
         if (nbttagcompound != null) {
+            /* // MultiPaper
             // CraftBukkit start
             if (player instanceof ServerPlayer) {
                 CraftPlayer player1 = (CraftPlayer) player.getBukkitEntity();
@@ -91,6 +107,7 @@ public class PlayerDataStorage {
                 }
             }
             // CraftBukkit end
+            */ // MultiPaper
             int i = nbttagcompound.contains("DataVersion", 3) ? nbttagcompound.getInt("DataVersion") : -1;
 
             player.load(ca.spottedleaf.dataconverter.minecraft.MCDataConverter.convertTag(ca.spottedleaf.dataconverter.minecraft.datatypes.MCTypeRegistry.PLAYER, nbttagcompound, i, net.minecraft.SharedConstants.getCurrentVersion().getWorldVersion())); // Paper - replace player converter
@@ -102,6 +119,8 @@ public class PlayerDataStorage {
     // CraftBukkit start
     public CompoundTag getPlayerData(String s) {
         try {
+            if (true) return MultiPaper.readPlayer(session.getLevelId(), s); // MultiPaper
+
             File file1 = new File(this.playerDir, s + ".dat");
 
             if (file1.exists()) {
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index abcce6bd0b32d0188751393a6f56f2e82530912c..29b3a70be0fdc0d5440d9ef6f385faba58267f03 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -149,6 +149,7 @@ import org.bukkit.scoreboard.Scoreboard;
 import org.jetbrains.annotations.NotNull;
 
 import net.md_5.bungee.api.chat.BaseComponent; // Spigot
+import puregero.multipaper.MultiPaper;
 
 @DelegateDeserialization(CraftOfflinePlayer.class)
 public class CraftPlayer extends CraftHumanEntity implements Player {
@@ -1219,6 +1220,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     @Override
     public void saveData() {
+        if (MultiPaper.isExternalPlayer(this.getHandle())) return; // MultiPaper
         server.getHandle().playerIo.save(this.getHandle());
     }
 
diff --git a/src/main/java/puregero/multipaper/ExternalPlayer.java b/src/main/java/puregero/multipaper/ExternalPlayer.java
index 9effb845199b6cb331d80a61adbde66f6fe2de48..3d61be7dca76a0eea39bce8f7455176d2f6b9a98 100644
--- a/src/main/java/puregero/multipaper/ExternalPlayer.java
+++ b/src/main/java/puregero/multipaper/ExternalPlayer.java
@@ -19,16 +19,21 @@ import org.bukkit.craftbukkit.CraftWorld;
 
 import javax.annotation.Nullable;
 import java.net.InetSocketAddress;
+import java.util.HashMap;
 import java.util.UUID;
 
 public class ExternalPlayer extends ServerPlayer {
 
     private static final Logger LOGGER = LogManager.getLogger(ExternalPlayer.class.getSimpleName());
+    public static HashMap<UUID, String> loadedAdvancements = new HashMap<>();
+    public static HashMap<UUID, String> loadedStats = new HashMap<>();
     public ExternalServerConnection externalServerConnection;
     private final InetSocketAddress address;
     private boolean sendPackets = true;
 
-    public static ExternalPlayer create(ExternalServerConnection externalServerConnection, String name, UUID uuid, String world, double x, double y, double z, float yaw, float pitch, GameType gamemode, InetSocketAddress address) {
+    public static ExternalPlayer create(ExternalServerConnection externalServerConnection, String name, UUID uuid, String world, double x, double y, double z, float yaw, float pitch, GameType gamemode, InetSocketAddress address, String advancements, String stats) {
+        loadedAdvancements.put(uuid, advancements);
+        loadedStats.put(uuid, stats);
         return new ExternalPlayer(externalServerConnection, name, uuid, world, x, y, z, yaw, pitch, gamemode, address);
     }
 
diff --git a/src/main/java/puregero/multipaper/MultiPaper.java b/src/main/java/puregero/multipaper/MultiPaper.java
index a391f44fce52ee41483851e6722982d00588547a..7cbb248a95f05fb33e98b09e85fa750df602a5ee 100644
--- a/src/main/java/puregero/multipaper/MultiPaper.java
+++ b/src/main/java/puregero/multipaper/MultiPaper.java
@@ -368,6 +368,34 @@ public class MultiPaper {
         }
     }
 
+    public static CompoundTag readPlayer(String world, String uuid) throws IOException {
+        byte[] data = getConnection().sendAndAwaitReply(new ReadPlayerMessage(world, uuid), DataMessageReply.class).thenApply(message -> message.data).join();
+
+        return data.length == 0 ? null : NbtIo.readCompressed(new ByteArrayInputStream(data));
+    }
+
+    public static void writePlayer(String world, String uuid, CompoundTag compoundTag) throws IOException {
+        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
+        NbtIo.writeCompressed(compoundTag, buffer);
+        getConnection().send(new WritePlayerMessage(world, uuid, buffer.toByteArray()), message -> { /* do nothing */ });
+    }
+
+    public static String readAdvancements(String world, String uuid) {
+        return getConnection().sendAndAwaitReply(new ReadAdvancementMessage(world, uuid), DataMessageReply.class).thenApply(message -> new String(message.data, StandardCharsets.UTF_8)).join();
+    }
+
+    public static void writeAdvancements(String world, String uuid, String json) {
+        getConnection().send(new WriteAdvancementsMessage(world, uuid, json.getBytes(StandardCharsets.UTF_8)), message -> { /* do nothing */ });
+    }
+
+    public static String readStats(String world, String uuid) {
+        return getConnection().sendAndAwaitReply(new ReadStatsMessage(world, uuid), DataMessageReply.class).thenApply(message -> new String(message.data, StandardCharsets.UTF_8)).join();
+    }
+
+    public static void writeStats(String world, String uuid, String json) {
+        getConnection().send(new WriteStatsMessage(world, uuid, json.getBytes(StandardCharsets.UTF_8)), message -> { /* do nothing */ });
+    }
+
     private static String getWorld(File path) {
         do {
             path = path.getParentFile();
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/PlayerCreatePacket.java b/src/main/java/puregero/multipaper/externalserverprotocol/PlayerCreatePacket.java
index 41898cbf342a5614fc6d08a3828a72398713cc82..1826796734cda0accc88e3545ea1e551140fe990 100644
--- a/src/main/java/puregero/multipaper/externalserverprotocol/PlayerCreatePacket.java
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/PlayerCreatePacket.java
@@ -31,6 +31,8 @@ public class PlayerCreatePacket extends ExternalServerPacket {
     private final GameType gamemode;
     private final byte[] ip;
     private final short port;
+    private final String advancements;
+    private final String stats;
 
     private PlayerCreatePacket(ServerPlayer player) {
         this.name = player.getScoreboardName();
@@ -44,6 +46,8 @@ public class PlayerCreatePacket extends ExternalServerPacket {
         this.gamemode = player.gameMode.getGameModeForPlayer();
         this.ip = ((InetSocketAddress) player.connection.connection.address).getAddress().getAddress();
         this.port = (short) ((InetSocketAddress) player.connection.connection.address).getPort();
+        this.advancements = player.getAdvancements().generateJson().toString();
+        this.stats = player.getStats().toJson();
     }
 
     public PlayerCreatePacket(FriendlyByteBuf in) {
@@ -58,6 +62,8 @@ public class PlayerCreatePacket extends ExternalServerPacket {
         gamemode = GameType.byId(in.readByte());
         ip = in.readByteArray();
         port = in.readShort();
+        advancements = in.readUtf(Integer.MAX_VALUE / 6); // divide by 6 cause mojang's code doesn't allow for a full 2^31-1 max length
+        stats = in.readUtf(Integer.MAX_VALUE / 6);
     }
 
     @Override
@@ -73,6 +79,8 @@ public class PlayerCreatePacket extends ExternalServerPacket {
         out.writeByte(gamemode.getId());
         out.writeByteArray(ip);
         out.writeShort(port);
+        out.writeUtf(advancements, Integer.MAX_VALUE / 6); // divide by 6 cause mojang's code doesn't allow for a full 2^31-1 max length
+        out.writeUtf(stats, Integer.MAX_VALUE / 6);
     }
 
     @Override
@@ -92,7 +100,7 @@ public class PlayerCreatePacket extends ExternalServerPacket {
                 e.printStackTrace();
             }
 
-            ExternalPlayer.create(connection, name, uuid, world, x, y, z, yaw, pitch, gamemode, address);
+            ExternalPlayer.create(connection, name, uuid, world, x, y, z, yaw, pitch, gamemode, address, advancements, stats);
         });
     }
 
