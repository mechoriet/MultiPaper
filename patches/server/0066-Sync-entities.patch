From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Sun, 21 Nov 2021 22:41:15 +1000
Subject: [PATCH] Sync entities


diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundMoveEntityPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundMoveEntityPacket.java
index 4d63a00fbe70de54987301d8b950c2750712cb11..f5613cbedb8fe9083426f55d864d86246fa0c40a 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundMoveEntityPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundMoveEntityPacket.java
@@ -28,7 +28,24 @@ public abstract class ClientboundMoveEntityPacket implements Packet<ClientGamePa
         this.hasRot = rotate;
         this.hasPos = positionChanged;
     }
+    public static long entityToPacket(double coord) {
+        return net.minecraft.util.Mth.lfloor(coord * 4096.0D); // Paper - check ItemEntity#setPosRaw on update
+    }
+
+    public static double packetToEntity(long coord) {
+        return (double)coord / 4096.0D; // Paper - check ItemEntity#setPosRaw on update
+    }
 
+    public net.minecraft.world.phys.Vec3 updateEntityPosition(net.minecraft.world.phys.Vec3 orig) {
+        double d = this.xa == 0 ? orig.x : packetToEntity(entityToPacket(orig.x) + (long)this.xa);
+        double e = this.ya == 0 ? orig.y : packetToEntity(entityToPacket(orig.y) + (long)this.ya);
+        double f = this.za == 0 ? orig.z : packetToEntity(entityToPacket(orig.z) + (long)this.za);
+        return new net.minecraft.world.phys.Vec3(d, e, f);
+    }
+
+    public static net.minecraft.world.phys.Vec3 packetToEntity(long x, long y, long z) {
+        return (new net.minecraft.world.phys.Vec3((double)x, (double)y, (double)z)).scale((double)2.4414062E-4F);
+    }
     @Override
     public void handle(ClientGamePacketListener listener) {
         listener.handleMoveEntity(this);
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundSetEntityDataPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundSetEntityDataPacket.java
index 3e17f6131bf590d7c4a16b79c1c145cb4f565bc9..1707513fedc6d4fa0b88e56d08accc887b490afd 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundSetEntityDataPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundSetEntityDataPacket.java
@@ -10,6 +10,13 @@ public class ClientboundSetEntityDataPacket implements Packet<ClientGamePacketLi
     private final int id;
     @Nullable
     private final List<SynchedEntityData.DataItem<?>> packedItems;
+    
+    // MultiPaper start
+    public ClientboundSetEntityDataPacket(int id, List<SynchedEntityData.DataItem<?>> packedItems) {
+        this.id = id;
+        this.packedItems = packedItems;
+    }
+    // MultiPaper end
 
     public ClientboundSetEntityDataPacket(int id, SynchedEntityData tracker, boolean forceUpdateAll) {
         this.id = id;
diff --git a/src/main/java/net/minecraft/network/syncher/SynchedEntityData.java b/src/main/java/net/minecraft/network/syncher/SynchedEntityData.java
index 1d88edfd09a909044f6e3175af652914b4d06311..4b70e69630446271eedad98a9f087ed1dac324b3 100644
--- a/src/main/java/net/minecraft/network/syncher/SynchedEntityData.java
+++ b/src/main/java/net/minecraft/network/syncher/SynchedEntityData.java
@@ -106,7 +106,7 @@ public class SynchedEntityData {
         // this.lock.writeLock().unlock(); // Spigot - not required
     }
 
-    private <T> SynchedEntityData.DataItem<T> getItem(EntityDataAccessor<T> datawatcherobject) {
+    public <T> SynchedEntityData.DataItem<T> getItem(EntityDataAccessor<T> datawatcherobject) { // MultiPaper - make public
         // Spigot start
         /*
         this.lock.readLock().lock();
diff --git a/src/main/java/net/minecraft/server/level/ChunkMap.java b/src/main/java/net/minecraft/server/level/ChunkMap.java
index 6ce2ffe897a91d6534ddb9fa7819e2680ad0ed6e..41b0d0f65949ee9b671e0c667c4fc027e31e3782 100644
--- a/src/main/java/net/minecraft/server/level/ChunkMap.java
+++ b/src/main/java/net/minecraft/server/level/ChunkMap.java
@@ -63,11 +63,7 @@ import net.minecraft.core.Registry;
 import net.minecraft.core.SectionPos;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.network.protocol.Packet;
-import net.minecraft.network.protocol.game.ClientboundLevelChunkWithLightPacket;
-import net.minecraft.network.protocol.game.ClientboundSetChunkCacheCenterPacket;
-import net.minecraft.network.protocol.game.ClientboundSetEntityLinkPacket;
-import net.minecraft.network.protocol.game.ClientboundSetPassengersPacket;
-import net.minecraft.network.protocol.game.DebugPackets;
+import net.minecraft.network.protocol.game.*;
 import net.minecraft.server.MCUtil;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.level.progress.ChunkProgressListener;
@@ -116,6 +112,7 @@ import org.bukkit.entity.Player;
 import it.unimi.dsi.fastutil.objects.ReferenceOpenHashSet; // Paper
 import puregero.multipaper.MultiPaper;
 import puregero.multipaper.MultiPaperChunkHandler;
+import puregero.multipaper.MultiPaperEntitiesHandler;
 
 public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider {
 
@@ -2350,10 +2347,22 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
         public void broadcast(Packet<?> packet) {
             Iterator iterator = this.seenBy.iterator();
 
+            // MultiPaper start - Are we ticking this entity?
+            LevelChunk chunk = level.getChunkIfLoaded(entity.blockPosition());
+            if (!MultiPaper.isExternalPlayer(MultiPaperEntitiesHandler.getControllingPassenger(entity)) &&
+                    (MultiPaper.isRealPlayer(entity) ||
+                    MultiPaper.isRealPlayer(MultiPaperEntitiesHandler.getControllingPassenger(entity)) ||
+                    (!MultiPaper.isExternalPlayer(entity) && MultiPaper.isChunkLocal(chunk)))) {
+                MultiPaperEntitiesHandler.onEntityUpdate(entity, packet); // MultiPaper
+            }
+            // MultiPaper end
+
             while (iterator.hasNext()) {
                 ServerPlayerConnection serverplayerconnection = (ServerPlayerConnection) iterator.next();
 
-                serverplayerconnection.send(packet);
+                if (!MultiPaper.isExternalPlayer(serverplayerconnection.getPlayer())) {
+                    serverplayerconnection.send(packet);
+                }
             }
 
         }
diff --git a/src/main/java/net/minecraft/server/level/ServerEntity.java b/src/main/java/net/minecraft/server/level/ServerEntity.java
index c9cb38a2401614210257c89fbb8dc97332b40957..4c5c592b0d012a84ae994c0c152e3812567b90b4 100644
--- a/src/main/java/net/minecraft/server/level/ServerEntity.java
+++ b/src/main/java/net/minecraft/server/level/ServerEntity.java
@@ -34,6 +34,7 @@ import net.minecraft.world.entity.decoration.ItemFrame;
 import net.minecraft.world.entity.projectile.AbstractArrow;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.MapItem;
+import net.minecraft.world.level.chunk.LevelChunk;
 import net.minecraft.world.level.saveddata.maps.MapItemSavedData;
 import net.minecraft.world.phys.Vec3;
 import org.slf4j.Logger;
@@ -43,6 +44,7 @@ import net.minecraft.server.network.ServerPlayerConnection;
 import net.minecraft.util.Mth;
 import org.bukkit.entity.Player;
 import org.bukkit.event.player.PlayerVelocityEvent;
+import puregero.multipaper.MultiPaper;
 // CraftBukkit end
 
 public class ServerEntity {
@@ -94,6 +96,15 @@ public class ServerEntity {
 
         Entity entity = this.entity;
 
+        // MultiPaper start - Entities in vehicles glitch out when crossing borders, this forces them to sync
+        if (!list.isEmpty()) {
+            for (Entity passenger : list) {
+                if (passenger.position().distanceToSqr(this.entity.position()) > 16) {
+                    passenger.setPosRaw(this.entity.getX(), this.entity.getY(), this.entity.getZ());
+                }
+            }
+        }
+        // MultiPaper end
         if (entity instanceof ItemFrame) {
             ItemFrame entityitemframe = (ItemFrame) entity;
 
@@ -128,7 +139,7 @@ public class ServerEntity {
             int i;
             int j;
 
-            if (this.entity.isPassenger()) {
+            if (!(this.entity instanceof ServerPlayer) && this.entity.isPassenger()) { // MultiPaper - Force full position update for players
                 i = Mth.floor(this.entity.getYRot() * 256.0F / 360.0F);
                 j = Mth.floor(this.entity.getXRot() * 256.0F / 360.0F);
                 boolean flag = Math.abs(i - this.yRotp) >= 1 || Math.abs(j - this.xRotp) >= 1;
@@ -249,6 +260,7 @@ public class ServerEntity {
 
     public void removePairing(ServerPlayer player) {
         this.entity.stopSeenByPlayer(player);
+        if (MultiPaper.isRealPlayer(player)) // MultiPaper - Don't send to external players
         player.connection.send(new ClientboundRemoveEntitiesPacket(new int[]{this.entity.getId()}));
     }
 
@@ -256,6 +268,7 @@ public class ServerEntity {
         ServerGamePacketListenerImpl playerconnection = player.connection;
 
         Objects.requireNonNull(player.connection);
+        if (MultiPaper.isRealPlayer(player)) // MultiPaper - Don't send to external players
         this.sendPairingData(playerconnection::send, player); // CraftBukkit - add player
         this.entity.startSeenByPlayer(player);
     }
diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index 5f4407df9543d06d1b718e3ae033cb54f7eb3923..c2cc20e56f43537e9c9c1c514fc1385883b0ffea 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -94,8 +94,11 @@ import net.minecraft.world.entity.animal.WaterAnimal;
 import net.minecraft.world.entity.animal.horse.SkeletonHorse;
 import net.minecraft.world.entity.boss.EnderDragonPart;
 import net.minecraft.world.entity.boss.enderdragon.EnderDragon;
+import net.minecraft.world.entity.decoration.ArmorStand;
 import net.minecraft.world.entity.npc.Npc;
 import net.minecraft.world.entity.player.Player;
+import net.minecraft.world.entity.projectile.FireworkRocketEntity;
+import net.minecraft.world.entity.projectile.FishingHook;
 import net.minecraft.world.entity.raid.Raid;
 import net.minecraft.world.entity.raid.Raids;
 import net.minecraft.world.item.crafting.RecipeManager;
@@ -171,6 +174,7 @@ import org.bukkit.event.world.TimeSkipEvent;
 import it.unimi.dsi.fastutil.ints.IntArrayList; // Paper
 import puregero.multipaper.MultiPaper;
 import puregero.multipaper.MultiPaperChunkHandler;
+import puregero.multipaper.MultiPaperEntitiesHandler;
 import puregero.multipaper.externalserverprotocol.TimeUpdatePacket;
 
 public class ServerLevel extends Level implements WorldGenLevel {
@@ -674,6 +678,8 @@ public class ServerLevel extends Level implements WorldGenLevel {
             org.spigotmc.ActivationRange.activateEntities(this); // Spigot
             timings.entityTick.startTiming(); // Spigot
             this.entityTickList.forEach((entity) -> {
+                if (!MultiPaperEntitiesHandler.tickEntity(entity)) return; // MultiPaper - should we tick this entity?
+
                 if (!entity.isRemoved()) {
                     if (false && this.shouldDiscardEntity(entity)) { // CraftBukkit - We prevent spawning in general, so this butchering is not needed
                         entity.discard();
@@ -1465,6 +1471,8 @@ public class ServerLevel extends Level implements WorldGenLevel {
             }
             // CraftBukkit end
 
+            MultiPaperEntitiesHandler.onEntitySpawn(entity); // MultiPaper
+
             return this.entityManager.addNewEntity(entity);
         }
     }
diff --git a/src/main/java/net/minecraft/server/level/ServerPlayer.java b/src/main/java/net/minecraft/server/level/ServerPlayer.java
index c859ed395f7c92c9b3bfb65882bcc1fa8e089c3d..a0eb7d63af2f9d4adff3ebb38961a7270e2d2456 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayer.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayer.java
@@ -1308,7 +1308,7 @@ public class ServerPlayer extends Player {
     @Override
     public void take(Entity item, int count) {
         super.take(item, count);
-        this.containerMenu.broadcastChanges();
+        if (!MultiPaperEntitiesHandler.takingItem) this.containerMenu.broadcastChanges(); // MultiPaper
     }
 
     // CraftBukkit start - moved bed result checks from below into separate method
@@ -1446,7 +1446,7 @@ public class ServerPlayer extends Player {
         } else {
             Entity entity2 = this.getVehicle();
 
-            if (entity2 != entity1 && this.connection != null) {
+            if (entity2 != entity1 && this.connection != null && MultiPaper.isChunkLocal(level.getChunkIfLoaded(entity.blockPosition()))) { // MultiPaper
                 this.connection.teleport(this.getX(), this.getY(), this.getZ(), this.getYRot(), this.getXRot());
             }
 
@@ -1463,7 +1463,7 @@ public class ServerPlayer extends Player {
         super.stopRiding(suppressCancellation); // Paper
         Entity entity1 = this.getVehicle();
 
-        if (entity1 != entity && this.connection != null) {
+        if (entity1 != entity && this.connection != null && MultiPaper.isChunkLocal(level.getChunkIfLoaded(entity.blockPosition()))) { // MultiPaper
             this.connection.dismount(this.getX(), this.getY(), this.getZ(), this.getYRot(), this.getXRot());
         }
 
@@ -1956,7 +1956,9 @@ public class ServerPlayer extends Player {
         this.locale = packet.language;
         // Paper start
         this.adventure$locale = net.kyori.adventure.translation.Translator.parseLocale(this.locale);
+        if (!(this instanceof ExternalPlayer)) { // MultiPaper
         this.connection.connection.channel.attr(PaperAdventure.LOCALE_ATTRIBUTE).set(this.adventure$locale);
+        } // MultiPaper
         // Paper end
         this.clientViewDistance = packet.viewDistance;
         // CraftBukkit end
diff --git a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
index f566fa98f8d4379b451fbaa6819bc6a2be17aa5d..ee00ec65f8beff06bc0e7dadf58439f9e93efe63 100644
--- a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -230,6 +230,7 @@ import org.bukkit.inventory.SmithingInventory;
 import puregero.multipaper.ExternalPlayer;
 import puregero.multipaper.MultiPaper;
 import puregero.multipaper.MultiPaperInventoryHandler;
+import puregero.multipaper.MultiPaperPlayerHandler;
 import puregero.multipaper.externalserverprotocol.PlayerRemovePacket;
 // CraftBukkit end
 
@@ -3361,6 +3362,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Ser
     @Override
     public void handlePlayerAbilities(ServerboundPlayerAbilitiesPacket packet) {
         PacketUtils.ensureRunningOnSameThread(packet, this, this.player.getLevel());
+        MultiPaperPlayerHandler.handlePlayerAbilities(this.player, packet); // MultiPaper
         // CraftBukkit start
         if (this.player.getAbilities().mayfly && this.player.getAbilities().flying != packet.isFlying()) {
             PlayerToggleFlightEvent event = new PlayerToggleFlightEvent(this.player.getBukkitEntity(), packet.isFlying());
@@ -3384,6 +3386,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Ser
             return;
         }
         // Paper end - do not accept invalid information
+        MultiPaperPlayerHandler.handleClientInformation(this.player, packet); // MultiPaper
         this.player.updateOptions(packet);
     }
 
diff --git a/src/main/java/net/minecraft/server/players/PlayerList.java b/src/main/java/net/minecraft/server/players/PlayerList.java
index 0079030700904d5f605167056cae78e2670d8600..f5739d2dd27e1588eb522e6f53079063deb6398c 100644
--- a/src/main/java/net/minecraft/server/players/PlayerList.java
+++ b/src/main/java/net/minecraft/server/players/PlayerList.java
@@ -117,10 +117,7 @@ import org.bukkit.event.player.PlayerRespawnEvent;
 import puregero.multipaper.ExternalPlayer;
 import puregero.multipaper.ExternalServerConnection;
 import puregero.multipaper.MultiPaper;
-import puregero.multipaper.externalserverprotocol.PlayerChangeDimensionPacket;
-import puregero.multipaper.externalserverprotocol.PlayerCreatePacket;
-import puregero.multipaper.externalserverprotocol.PlayerRemovePacket;
-import puregero.multipaper.externalserverprotocol.PlayerRespawnPacket;
+import puregero.multipaper.externalserverprotocol.*;
 // CraftBukkit end
 
 public abstract class PlayerList {
@@ -348,7 +345,6 @@ public abstract class PlayerList {
             MultiPaper.sendPlayerDisconnect(player); // MultiPaper
             return;
         }
-        MultiPaper.onPlayerJoin(player); // MultiPaper
         player.didPlayerJoinEvent = true;
         // Paper end
         MutableComponent ichatmutablecomponent;
@@ -395,6 +391,8 @@ public abstract class PlayerList {
         }
         // CraftBukkit end
 
+        MultiPaper.onPlayerJoin(player); // MultiPaper
+
         // CraftBukkit start - sendAll above replaced with this loop
         ClientboundPlayerInfoPacket packet = new ClientboundPlayerInfoPacket(ClientboundPlayerInfoPacket.Action.ADD_PLAYER, player);
 
@@ -1046,6 +1044,7 @@ public abstract class PlayerList {
 
                 if (subscribedToSoruce && subscribedToDestination) {
                     externalServer.getConnection().send(new PlayerChangeDimensionPacket(entityplayer1, !flag));
+                    externalServer.getConnection().send(new EntityUpdatePacket(entityplayer1, new ClientboundSetEntityDataPacket(entityplayer1.getId(), entityplayer1.getEntityData().getAll())));
                 } else if (subscribedToDestination) {
                     serversToCreatePlayerOn.add(externalServer.getConnection());
                 } else if (subscribedToSoruce) {
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index 0cfc828bfa20845c45c773a1f7cb343c1fd362b9..cd01a3b4f3850a9acb08c1efef7780564167fdb0 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -145,7 +145,10 @@ import org.bukkit.event.entity.EntityPortalEvent;
 import org.bukkit.event.entity.EntityPoseChangeEvent;
 import org.bukkit.event.player.PlayerTeleportEvent;
 import org.bukkit.plugin.PluginManager;
+import puregero.multipaper.ExternalServer;
 import puregero.multipaper.MultiPaper;
+import puregero.multipaper.MultiPaperEntitiesHandler;
+import puregero.multipaper.externalserverprotocol.EntityRemovePacket;
 // CraftBukkit end
 
 public abstract class Entity implements Nameable, EntityAccess, CommandSource {
@@ -333,12 +336,13 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
     private static final int FLAG_INVISIBLE = 5;
     protected static final int FLAG_GLOWING = 6;
     protected static final int FLAG_FALL_FLYING = 7;
+    public boolean isSyncing = false;  // MultiPaper - add isSyncing
     private static final EntityDataAccessor<Integer> DATA_AIR_SUPPLY_ID = SynchedEntityData.defineId(Entity.class, EntityDataSerializers.INT);
     private static final EntityDataAccessor<Optional<Component>> DATA_CUSTOM_NAME = SynchedEntityData.defineId(Entity.class, EntityDataSerializers.OPTIONAL_COMPONENT);
     private static final EntityDataAccessor<Boolean> DATA_CUSTOM_NAME_VISIBLE = SynchedEntityData.defineId(Entity.class, EntityDataSerializers.BOOLEAN);
     private static final EntityDataAccessor<Boolean> DATA_SILENT = SynchedEntityData.defineId(Entity.class, EntityDataSerializers.BOOLEAN);
     private static final EntityDataAccessor<Boolean> DATA_NO_GRAVITY = SynchedEntityData.defineId(Entity.class, EntityDataSerializers.BOOLEAN);
-    protected static final EntityDataAccessor<net.minecraft.world.entity.Pose> DATA_POSE = SynchedEntityData.defineId(Entity.class, EntityDataSerializers.POSE);
+    public static final EntityDataAccessor<net.minecraft.world.entity.Pose> DATA_POSE = SynchedEntityData.defineId(Entity.class, EntityDataSerializers.POSE); // MultiPaper - make public
     private static final EntityDataAccessor<Integer> DATA_TICKS_FROZEN = SynchedEntityData.defineId(Entity.class, EntityDataSerializers.INT);
     private EntityInLevelCallback levelCallback;
     private final VecDeltaCodec packetPositionCodec;
@@ -2471,7 +2475,8 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
         EntityType<?> entitytypes = this.getType();
         ResourceLocation minecraftkey = EntityType.getKey(entitytypes);
 
-        return entitytypes.canSerialize() && minecraftkey != null ? minecraftkey.toString() : null;
+        return (entitytypes.canSerialize() || isSyncing) && minecraftkey != null ? minecraftkey.toString() : null; // MultiPaper - add isSyncing
+        // Paper end
     }
 
     protected abstract void readAdditionalSaveData(CompoundTag nbt);
@@ -4306,6 +4311,10 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
             int j = Mth.floor(y);
             int k = Mth.floor(z);
 
+            if ((i >> 4) != (this.blockPosition.getX() >> 4) || (k >> 4) != (this.blockPosition.getZ() >> 4)) {
+                MultiPaperEntitiesHandler.onChunkMove(this, new BlockPos(i, j, k), this.blockPosition);
+            }
+
             if (i != this.blockPosition.getX() || j != this.blockPosition.getY() || k != this.blockPosition.getZ()) {
                 this.blockPosition = new BlockPos(i, j, k);
                 this.feetBlockState = null;
@@ -4401,6 +4410,9 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
 
     @Override
     public final void setRemoved(Entity.RemovalReason reason) {
+        MultiPaperEntitiesHandler.onEntityRemove(this, reason); // MultiPaper
+        EntityRemovePacket.setEntityRemoved(this.getUUID(), reason); // MultiPaper
+
         if (this.removalReason == null) {
             this.removalReason = reason;
         }
@@ -4424,7 +4436,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
 
     @Override
     public boolean shouldBeSaved() {
-        return this.removalReason != null && !this.removalReason.shouldSave() ? false : (this.isPassenger() ? false : !this.isVehicle() || !this.hasExactlyOnePlayerPassenger());
+        return !getType().canSerialize() || (this.removalReason != null && !this.removalReason.shouldSave()) ? false : (this.isPassenger() ? false : !this.isVehicle() || !this.hasExactlyOnePlayerPassenger()); // MultiPaper - if they can't be serialized, they also can't be saved
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/LivingEntity.java b/src/main/java/net/minecraft/world/entity/LivingEntity.java
index 5b92f38360c96c12cffc99b5eea56191badbafb3..ea09760a260348050fbfa1c957c9a399c6aed42e 100644
--- a/src/main/java/net/minecraft/world/entity/LivingEntity.java
+++ b/src/main/java/net/minecraft/world/entity/LivingEntity.java
@@ -140,6 +140,7 @@ import org.bukkit.event.entity.EntityRegainHealthEvent;
 import org.bukkit.event.entity.EntityResurrectEvent;
 import org.bukkit.event.entity.EntityTeleportEvent;
 import org.bukkit.event.player.PlayerItemConsumeEvent;
+import puregero.multipaper.MultiPaper;
 // CraftBukkit end
 
 
@@ -2631,6 +2632,7 @@ public abstract class LivingEntity extends Entity {
             vec3d = new Vec3(this.getX(), d0, this.getZ());
         }
 
+        if (MultiPaper.isChunkLocal(level.getChunkIfLoaded(vehicle.blockPosition()))) // MultiPaper
         this.dismountTo(vec3d.x, vec3d.y, vec3d.z);
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/Mob.java b/src/main/java/net/minecraft/world/entity/Mob.java
index d34a7ac8c11fd84c95f8e4c5c45beaa3f6a8ee53..49671da87f91a1103818df514c4f8dd76c6f6f3d 100644
--- a/src/main/java/net/minecraft/world/entity/Mob.java
+++ b/src/main/java/net/minecraft/world/entity/Mob.java
@@ -1499,7 +1499,7 @@ public abstract class Mob extends LivingEntity {
         return flag1;
     }
 
-    private void restoreLeashFromSave() {
+    public void restoreLeashFromSave() { // MultiPaper - make public
         if (this.leashInfoTag != null && this.level instanceof ServerLevel) {
             if (this.leashInfoTag.hasUUID("UUID")) {
                 UUID uuid = this.leashInfoTag.getUUID("UUID");
diff --git a/src/main/java/net/minecraft/world/entity/player/Player.java b/src/main/java/net/minecraft/world/entity/player/Player.java
index cd9cbfa5ef94994b3f7f2ecdde843620e7e6c071..065285f45ea6e3655521464eb1e883ad78167122 100644
--- a/src/main/java/net/minecraft/world/entity/player/Player.java
+++ b/src/main/java/net/minecraft/world/entity/player/Player.java
@@ -145,7 +145,7 @@ public abstract class Player extends LivingEntity {
     private static final EntityDataAccessor<Float> DATA_PLAYER_ABSORPTION_ID = SynchedEntityData.defineId(Player.class, EntityDataSerializers.FLOAT);
     private static final EntityDataAccessor<Integer> DATA_SCORE_ID = SynchedEntityData.defineId(Player.class, EntityDataSerializers.INT);
     public static final EntityDataAccessor<Byte> DATA_PLAYER_MODE_CUSTOMISATION = SynchedEntityData.defineId(Player.class, EntityDataSerializers.BYTE);
-    protected static final EntityDataAccessor<Byte> DATA_PLAYER_MAIN_HAND = SynchedEntityData.defineId(Player.class, EntityDataSerializers.BYTE);
+    public static final EntityDataAccessor<Byte> DATA_PLAYER_MAIN_HAND = SynchedEntityData.defineId(Player.class, EntityDataSerializers.BYTE); // MultiPaper - make public
     protected static final EntityDataAccessor<CompoundTag> DATA_SHOULDER_LEFT = SynchedEntityData.defineId(Player.class, EntityDataSerializers.COMPOUND_TAG);
     protected static final EntityDataAccessor<CompoundTag> DATA_SHOULDER_RIGHT = SynchedEntityData.defineId(Player.class, EntityDataSerializers.COMPOUND_TAG);
     private long timeEntitySatOnShoulder;
diff --git a/src/main/java/net/minecraft/world/entity/projectile/FishingHook.java b/src/main/java/net/minecraft/world/entity/projectile/FishingHook.java
index f5886a88fd98ede5e85a91eccccb05ac33eb40e2..1aabff9fc9c5f0c1155423da484bb27fdb3bd167 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/FishingHook.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/FishingHook.java
@@ -48,6 +48,7 @@ import org.slf4j.Logger;
 import org.bukkit.entity.Player;
 import org.bukkit.entity.FishHook;
 import org.bukkit.event.player.PlayerFishEvent;
+import puregero.multipaper.MultiPaper;
 // CraftBukkit end
 
 public class FishingHook extends Projectile {
@@ -304,6 +305,7 @@ public class FishingHook extends Projectile {
     }
 
     private void catchingFish(BlockPos pos) {
+        if (!MultiPaper.isChunkLocal(level.getChunkIfLoaded(blockPosition()))) return; // MultiPaper - Only catch fish on our own chunks
         ServerLevel worldserver = (ServerLevel) this.level;
         int i = 1;
         BlockPos blockposition1 = pos.above();
diff --git a/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java b/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
index d597b10ea6087b6bcbd883fefd242069db977f7e..992b9fb0860dafd045708f0135869a480024e5f7 100644
--- a/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
+++ b/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
@@ -87,6 +87,7 @@ public class LevelChunk extends ChunkAccess {
     @Nullable public ExternalServer externalOwner; // MultiPaper - Chunk owner
     public Set<ExternalServer> externalSubscribers = ConcurrentHashMap.newKeySet(); // MultiPaper - Chunk subscribers
     public boolean hasExternalLockRequest = false; // MultiPaper - Have we sent a request to lock this chunk?
+    public Set<ExternalServer> externalEntitiesSubscribers = ConcurrentHashMap.newKeySet(); // MultiPaper - Entities subscribers
     @Nullable
     private Supplier<ChunkHolder.FullChunkStatus> fullStatus;
     @Nullable
diff --git a/src/main/java/net/minecraft/world/level/chunk/storage/EntityStorage.java b/src/main/java/net/minecraft/world/level/chunk/storage/EntityStorage.java
index 27444fe2f9987bfe1417a3b712ffabd3aabf0a70..6686edfdc574a90de67d650e2e9df74dfc46abb0 100644
--- a/src/main/java/net/minecraft/world/level/chunk/storage/EntityStorage.java
+++ b/src/main/java/net/minecraft/world/level/chunk/storage/EntityStorage.java
@@ -25,6 +25,7 @@ import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.entity.ChunkEntities;
 import net.minecraft.world.level.entity.EntityPersistentStorage;
 import org.slf4j.Logger;
+import puregero.multipaper.MultiPaperEntitiesHandler;
 
 public class EntityStorage implements EntityPersistentStorage<Entity> {
     private static final Logger LOGGER = LogUtils.getLogger();
@@ -85,6 +86,7 @@ public class EntityStorage implements EntityPersistentStorage<Entity> {
         ChunkPos chunkPos = dataList.getPos();
         if (dataList.isEmpty()) {
             if (this.emptyChunks.add(chunkPos.toLong())) {
+                MultiPaperEntitiesHandler.willWriteEntities(level, chunkPos); // MultiPaper
                 this.worker.store(chunkPos, (CompoundTag)null);
             }
             this.emptyChunks.remove(chunkPos.toLong()); // MultiPaper - don't cache empty chunks
@@ -112,6 +114,7 @@ public class EntityStorage implements EntityPersistentStorage<Entity> {
             compoundTag.putInt("DataVersion", SharedConstants.getCurrentVersion().getWorldVersion());
             compoundTag.put("Entities", listTag);
             writeChunkPos(compoundTag, chunkPos);
+            MultiPaperEntitiesHandler.willWriteEntities(level, chunkPos); // MultiPaper
             this.worker.store(chunkPos, compoundTag).exceptionally((ex) -> {
                 LOGGER.error("Failed to store chunk {}", chunkPos, ex);
                 return null;
diff --git a/src/main/java/net/minecraft/world/level/chunk/storage/RegionFileStorage.java b/src/main/java/net/minecraft/world/level/chunk/storage/RegionFileStorage.java
index c31b9a6b1d4548d507ecb60d42ca9f96f49f6c4b..dddcc925f6472f4bdf0027517310383897d5e893 100644
--- a/src/main/java/net/minecraft/world/level/chunk/storage/RegionFileStorage.java
+++ b/src/main/java/net/minecraft/world/level/chunk/storage/RegionFileStorage.java
@@ -17,6 +17,7 @@ import net.minecraft.nbt.StreamTagVisitor;
 import net.minecraft.nbt.Tag;
 import net.minecraft.util.ExceptionCollector;
 import net.minecraft.world.level.ChunkPos;
+import puregero.multipaper.MultiPaper;
 
 public class RegionFileStorage implements AutoCloseable {
 
@@ -178,6 +179,7 @@ public class RegionFileStorage implements AutoCloseable {
 
     @Nullable
     public CompoundTag read(ChunkPos pos) throws IOException {
+        if (true) return MultiPaper.readRegionFileNBT(folder.toFile(), pos); // MultiPaper
         // CraftBukkit start - SPIGOT-5680: There's no good reason to preemptively create files on read, save that for writing
         RegionFile regionfile = this.getRegionFile(pos, true, true); // Paper
         if (regionfile == null) {
@@ -285,6 +287,12 @@ public class RegionFileStorage implements AutoCloseable {
     }
 
     protected void write(ChunkPos pos, @Nullable CompoundTag nbt) throws IOException {
+        // MultiPaper start
+        if (true) {
+            MultiPaper.writeRegionFileNBT(folder.toFile(), pos, nbt);
+            return;
+        }
+        // MultiPaper end
         RegionFile regionfile = this.getRegionFile(pos, false, true); // CraftBukkit // Paper
         try { // Paper
         int attempts = 0; Exception laste = null; while (attempts++ < 5) { try { // Paper
diff --git a/src/main/java/net/minecraft/world/level/entity/PersistentEntitySectionManager.java b/src/main/java/net/minecraft/world/level/entity/PersistentEntitySectionManager.java
index 8dd6abe601ed0ec940eacbb31e60a6598900c7f4..7876160df5ad3ad79d99f39234f15a133820cd33 100644
--- a/src/main/java/net/minecraft/world/level/entity/PersistentEntitySectionManager.java
+++ b/src/main/java/net/minecraft/world/level/entity/PersistentEntitySectionManager.java
@@ -26,10 +26,15 @@ import net.minecraft.util.CsvOutput;
 import net.minecraft.util.VisibleForDebug;
 import net.minecraft.world.entity.Entity;
 import org.slf4j.Logger;
+import net.minecraft.world.entity.Mob;
+import net.minecraft.world.level.chunk.LevelChunk;
 import net.minecraft.world.level.ChunkPos;
 // CraftBukkit start
 import net.minecraft.world.level.chunk.storage.EntityStorage;
 import org.bukkit.craftbukkit.event.CraftEventFactory;
+import puregero.multipaper.MultiPaper;
+import puregero.multipaper.MultiPaperEntitiesHandler;
+import puregero.multipaper.externalserverprotocol.EntityUpdateNBTPacket;
 // CraftBukkit end
 
 public class PersistentEntitySectionManager<T extends EntityAccess> implements AutoCloseable {
@@ -42,9 +47,9 @@ public class PersistentEntitySectionManager<T extends EntityAccess> implements A
     final EntitySectionStorage<T> sectionStorage;
     private final LevelEntityGetter<T> entityGetter;
     private final Long2ObjectMap<Visibility> chunkVisibility = new Long2ObjectOpenHashMap();
-    private final Long2ObjectMap<PersistentEntitySectionManager.ChunkLoadStatus> chunkLoadStatuses = new Long2ObjectOpenHashMap();
+    public final Long2ObjectMap<PersistentEntitySectionManager.ChunkLoadStatus> chunkLoadStatuses = new Long2ObjectOpenHashMap(); // MultiPaper - make public
     private final LongSet chunksToUnload = new LongOpenHashSet();
-    private final Queue<ChunkEntities<T>> loadingInbox = Queues.newConcurrentLinkedQueue();
+    public final Queue<ChunkEntities<T>> loadingInbox = Queues.newConcurrentLinkedQueue(); // MultiPaper - make public
     public final io.papermc.paper.world.EntitySliceManager entitySliceManager; // Paper
 
     public PersistentEntitySectionManager(Class<T> entityClass, LevelCallback<T> handler, EntityPersistentStorage<T> dataAccess, io.papermc.paper.world.EntitySliceManager entitySliceManager) { // Paper
@@ -312,6 +317,7 @@ public class PersistentEntitySectionManager<T extends EntityAccess> implements A
                 if (persistententitysectionmanager_b == PersistentEntitySectionManager.ChunkLoadStatus.LOADED) {
                     if (callEvent) CraftEventFactory.callEntitiesUnloadEvent(((EntityStorage) this.permanentStorage).level, new ChunkPos(i), ImmutableList.of()); // CraftBukkit
                     this.permanentStorage.storeEntities(new ChunkEntities<>(new ChunkPos(i), ImmutableList.of()));
+                    if (callEvent) MultiPaperEntitiesHandler.onEntitiesUnload(entitySliceManager.world, new ChunkPos(i)); // MultiPaper
                 }
 
                 return true;
@@ -321,6 +327,7 @@ public class PersistentEntitySectionManager<T extends EntityAccess> implements A
             } else {
                 if (callEvent) CraftEventFactory.callEntitiesUnloadEvent(((EntityStorage) this.permanentStorage).level, new ChunkPos(i), list.stream().map(entity -> (Entity) entity).collect(Collectors.toList())); // CraftBukkit
                 this.permanentStorage.storeEntities(new ChunkEntities<>(new ChunkPos(i), list));
+                if (callEvent) MultiPaperEntitiesHandler.onEntitiesUnload(entitySliceManager.world, new ChunkPos(i)); // MultiPaper
                 list.forEach(consumer);
                 return true;
             }
@@ -371,14 +378,26 @@ public class PersistentEntitySectionManager<T extends EntityAccess> implements A
         ChunkEntities<T> chunkentities; // CraftBukkit - decompile error
 
         while ((chunkentities = (ChunkEntities) this.loadingInbox.poll()) != null) {
+            // Multipaper start - Sometimes chunks already have entities loaded? Send these to subscribed chunks
+            List<Entity> existingEntities = getEntities(chunkentities.getPos()).stream().filter(entity -> entity.shouldBeSaved()).toList();
+            // MultiPaper end
             chunkentities.getEntities().forEach((entityaccess) -> {
                 this.addEntity(entityaccess, true);
+                if (entityaccess instanceof Mob mob) mob.restoreLeashFromSave(); // MultiPaper
             });
             this.chunkLoadStatuses.put(chunkentities.getPos().toLong(), PersistentEntitySectionManager.ChunkLoadStatus.LOADED);
             // CraftBukkit start - call entity load event
             List<Entity> entities = this.getEntities(chunkentities.getPos());
             CraftEventFactory.callEntitiesLoadEvent(((EntityStorage) this.permanentStorage).level, chunkentities.getPos(), entities);
             // CraftBukkit end
+            // Multipaper start - Sometimes chunks already have entities loaded? Send these to subscribed chunks
+            LevelChunk chunk = entitySliceManager.world.getChunkIfLoaded(chunkentities.getPos().x, chunkentities.getPos().z);
+            if (chunk != null) {
+                for (Entity existingEntity : existingEntities) {
+                    MultiPaper.broadcastPacketToExternalServers(chunk.externalEntitiesSubscribers, () -> new EntityUpdateNBTPacket(existingEntity));
+                }
+            }
+            // MultiPaper end
         }
 
     }
@@ -503,7 +522,7 @@ public class PersistentEntitySectionManager<T extends EntityAccess> implements A
         return i + "," + this.visibleEntityStorage.count() + "," + this.sectionStorage.count() + "," + this.chunkLoadStatuses.size() + "," + this.chunkVisibility.size() + "," + this.loadingInbox.size() + "," + this.chunksToUnload.size();
     }
 
-    private static enum ChunkLoadStatus {
+    public static enum ChunkLoadStatus { // MultiPaper - make public
 
         FRESH, PENDING, LOADED;
 
diff --git a/src/main/java/puregero/multipaper/ExternalPlayer.java b/src/main/java/puregero/multipaper/ExternalPlayer.java
index 3ba42c9ab0d3bafb6e4d5273dcb0e5e5d4e5ed0a..2b9b4ad688b71aad9963e7831cafdac1cc7b991c 100644
--- a/src/main/java/puregero/multipaper/ExternalPlayer.java
+++ b/src/main/java/puregero/multipaper/ExternalPlayer.java
@@ -7,6 +7,7 @@ import net.minecraft.network.Connection;
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.network.protocol.PacketFlow;
 import net.minecraft.network.protocol.game.*;
+import net.minecraft.network.syncher.EntityDataAccessor;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.server.network.ServerGamePacketListenerImpl;
@@ -16,9 +17,11 @@ import org.apache.logging.log4j.Logger;
 import org.bukkit.Bukkit;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.craftbukkit.CraftWorld;
+import puregero.multipaper.externalserverprotocol.EntityUpdatePacket;
 
 import javax.annotation.Nullable;
 import java.net.InetSocketAddress;
+import java.util.Collections;
 import java.util.HashMap;
 import java.util.UUID;
 
@@ -30,6 +33,7 @@ public class ExternalPlayer extends ServerPlayer {
     public ExternalServerConnection externalServerConnection;
     private final InetSocketAddress address;
     private boolean sendPackets = true;
+    public boolean updatingData = false;
 
     public static ExternalPlayer create(ExternalServerConnection externalServerConnection, String name, UUID uuid, String world, double x, double y, double z, float yaw, float pitch, GameType gamemode, InetSocketAddress address, String advancements, String stats) {
         loadedAdvancements.put(uuid, advancements);
@@ -49,6 +53,17 @@ public class ExternalPlayer extends ServerPlayer {
         setPos(x, y, z);
         setYRot(yaw);
         setXRot(pitch);
+
+        for (int i = 0; i < getServer().getPlayerList().players.size(); ++i) {
+            ServerPlayer entityplayer1 = getServer().getPlayerList().players.get(i);
+
+            if (!entityplayer1.getBukkitEntity().canSee(getBukkitEntity())) {
+                continue;
+            }
+
+            entityplayer1.connection.send(new ClientboundPlayerInfoPacket(ClientboundPlayerInfoPacket.Action.ADD_PLAYER, new ServerPlayer[] { this }));
+        }
+
         getServer().getPlayerList().addPlayer(this);
         ((ServerLevel) level).addNewPlayer(this);
         sendPackets = false;
@@ -100,12 +115,15 @@ public class ExternalPlayer extends ServerPlayer {
     }
 
     @Override
-    public boolean broadcastToPlayer(ServerPlayer spectator) {
-        return false;
+    public void checkInsideBlocks() {
+        super.checkInsideBlocks();
     }
 
     @Override
-    public void checkInsideBlocks() {
-        super.checkInsideBlocks();
+    public void onSyncedDataUpdated(EntityDataAccessor<?> data) {
+        if (!updatingData && didPlayerJoinEvent) {
+            MultiPaper.broadcastPacketToExternalServers(new EntityUpdatePacket(this,
+                    new ClientboundSetEntityDataPacket(getId(), Collections.singletonList(getEntityData().getItem(data)))));
+        }
     }
 }
diff --git a/src/main/java/puregero/multipaper/ExternalServerConnection.java b/src/main/java/puregero/multipaper/ExternalServerConnection.java
index ec325d9fee73e64a043f3e9a9d965e87b595a1b5..ae5f006b5876b933a02ba11b75a9353848150d6c 100644
--- a/src/main/java/puregero/multipaper/ExternalServerConnection.java
+++ b/src/main/java/puregero/multipaper/ExternalServerConnection.java
@@ -41,6 +41,7 @@ public class ExternalServerConnection extends ChannelInitializer<SocketChannel>
     public final ConcurrentHashMap<ChunkKey, Consumer<DataInputStream>> chunkCallbacks = new ConcurrentHashMap<>();
     public long lastPacketSent = 0;
     public long lastPacketReceived = 0;
+    public final ConcurrentHashMap<ChunkKey, Consumer<DataInputStream>> entitiesCallbacks = new ConcurrentHashMap<>();
 
     public ExternalServerConnection() {
 
@@ -189,4 +190,15 @@ public class ExternalServerConnection extends ChannelInitializer<SocketChannel>
         RequestChunkPacket.blocker = externalServer;
         send(new RequestChunkPacket(world, cx, cz));
     }
+
+    public void requestEntities(String world, int cx, int cz, Consumer<DataInputStream> callback) {
+        if (callback != null) {
+            if (entitiesCallbacks.put(new ChunkKey(world, cx, cz), callback) != null) {
+                LOGGER.warn("An entities callback already existed for " + world + ", " + cx + ", " + cz + " (new request is to " + externalServer.getName() + ")");
+                LOGGER.warn("Stats for " + externalServer.getName() + ": last packet sent=" + (System.currentTimeMillis() - lastPacketSent) + "ms ago; last packet received=" + (System.currentTimeMillis() - lastPacketReceived) + "ms ago");
+            }
+        }
+
+        send(new RequestEntitiesPacket(world, cx, cz));
+    }
 }
diff --git a/src/main/java/puregero/multipaper/MultiPaper.java b/src/main/java/puregero/multipaper/MultiPaper.java
index 6bf5b9cf9611a40811f3db7b1f11ad1e8415d519..0ae37759639944f7130c616a572a78a081fc5395 100644
--- a/src/main/java/puregero/multipaper/MultiPaper.java
+++ b/src/main/java/puregero/multipaper/MultiPaper.java
@@ -116,6 +116,9 @@ public class MultiPaper {
             ChunkHolder holder = visibleChunksToCheck.remove(visibleChunksToCheck.size() - 1);
             if (holder.getAvailableChunkNow() != null && holder.getWorld().chunkSource.chunkMap.getVisibleChunkIfPresent(holder.pos.longKey) == holder) {
                 getConnection().send(new SyncChunkSubscribersMessage(holder.getWorld().getWorld().getName(), holder.pos.x, holder.pos.z));
+                if (holder.getWorld().entityManager.areEntitiesLoaded(holder.pos.longKey)) {
+                    getConnection().send(new SyncEntitiesSubscribersMessage(holder.getWorld().getWorld().getName(), holder.pos.x, holder.pos.z));
+                }
                 break;
             }
         }
@@ -306,6 +309,8 @@ public class MultiPaper {
                         RequestChunkPacket.blocker = null;
                         future.complete(inputStream);
                     });
+                } else if (path.equals("entities")) {
+                    server.getConnection().requestEntities(world, cx, cz, future::complete);
                 } else {
                     throw new IllegalArgumentException("Cannot load a " + path + " chunk from an external server");
                 }
@@ -468,6 +473,7 @@ public class MultiPaper {
 
     public static void unlockChunk(LevelChunk chunk) {
         if (MultiPaper.isChunkLocal(chunk)) {
+            broadcastPacketToExternalServers(chunk.externalEntitiesSubscribers, () -> new SendEntitiesPacket(chunk));
             broadcastPacketToExternalServers(chunk.externalSubscribers, () -> new SendTickListPacket(chunk));
             for (BlockEntity blockEntity : chunk.getBlockEntities().values()) {
                 if (blockEntity instanceof Container container) {
diff --git a/src/main/java/puregero/multipaper/MultiPaperConnection.java b/src/main/java/puregero/multipaper/MultiPaperConnection.java
index 0da1af36a3145a0dc36c44df76eb2701c9a02132..8e2362a69a02e394bf43b36d108fb46e06583a25 100644
--- a/src/main/java/puregero/multipaper/MultiPaperConnection.java
+++ b/src/main/java/puregero/multipaper/MultiPaperConnection.java
@@ -12,9 +12,13 @@ import io.netty.channel.socket.SocketChannel;
 import io.netty.channel.socket.nio.NioSocketChannel;
 import net.minecraft.core.Registry;
 import net.minecraft.resources.ResourceLocation;
+import net.minecraft.network.protocol.game.ClientboundSetPassengersPacket;
+import net.minecraft.server.MCUtil;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.level.ChunkHolder;
 import net.minecraft.server.level.ServerLevel;
+import net.minecraft.world.entity.Entity;
+import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.chunk.ChunkAccess;
 import net.minecraft.world.level.chunk.ChunkStatus;
 import net.minecraft.world.level.chunk.LevelChunk;
@@ -23,8 +27,7 @@ import org.apache.logging.log4j.Logger;
 import org.bukkit.Bukkit;
 import org.bukkit.World;
 import org.bukkit.craftbukkit.CraftWorld;
-import puregero.multipaper.externalserverprotocol.RequestChunkPacket;
-import puregero.multipaper.externalserverprotocol.SendTickListPacket;
+import puregero.multipaper.externalserverprotocol.*;
 import puregero.multipaper.mastermessagingprotocol.MessageBootstrap;
 import puregero.multipaper.mastermessagingprotocol.messages.masterbound.*;
 import puregero.multipaper.mastermessagingprotocol.messages.serverbound.*;
@@ -100,6 +103,9 @@ public class MultiPaperConnection extends ServerBoundMessageHandler {
                 level.chunkSource.chunkMap.updatingChunks.getUpdatingValuesCopy().forEach(chunkHolder -> {
                     channel.write(new SubscribeChunkMessage(level.getWorld().getName(), chunkHolder.pos.x, chunkHolder.pos.z));
                 });
+                level.entityManager.chunkLoadStatuses.forEach((key, status) -> {
+                    channel.write(new SubscribeEntitiesMessage(level.getWorld().getName(), ChunkPos.getX(key), ChunkPos.getZ(key)));
+                });
             }
         }
 
@@ -208,6 +214,7 @@ public class MultiPaperConnection extends ServerBoundMessageHandler {
         if (chunk != null) {
             if (chunk instanceof LevelChunk levelChunk) {
                 if (levelChunk.externalOwner != null && levelChunk.externalOwner.isMe() && server != null && !server.isMe()) {
+                    server.getConnection().send(new SendEntitiesPacket(levelChunk));
                     server.getConnection().send(new SendTickListPacket(levelChunk));
                 }
                 if (server != null && server.isMe()) {
@@ -332,4 +339,62 @@ public class MultiPaperConnection extends ServerBoundMessageHandler {
             }
         });
     }
+
+    @Override
+    public void handle(AddEntitySubscriberMessage message) {
+        ExternalServer server = getOrCreateServer(message.server);
+
+        MultiPaper.runSync(() -> {
+            ChunkAccess chunk = MultiPaper.getChunkAccess(message.world, message.cx, message.cz);
+            if (chunk instanceof LevelChunk levelChunk) {
+                levelChunk.externalEntitiesSubscribers.add(server);
+            } else {
+                LOGGER.warn("Received an entities subscribe notification for an unloaded chunk " + message.world + ";" + message.cx + ";" + message.cz);
+            }
+        });
+
+        MCUtil.scheduleTask(2, () -> {
+            ChunkAccess chunk = MultiPaper.getChunkAccess(message.world, message.cx, message.cz);
+            if (chunk instanceof LevelChunk levelChunk) {
+                for (Entity entity : levelChunk.level.entityManager.getEntities(chunk.getPos())) {
+                    if (MultiPaper.isRealPlayer(entity) && entity.getVehicle() != null) {
+                        server.getConnection().send(new EntityUpdateNBTPacket(entity.getVehicle()));
+                        server.getConnection().send(new EntityUpdateWithDependenciesPacket(entity.getVehicle(), entity.getVehicle().getPassengers(), new ClientboundSetPassengersPacket(entity.getVehicle())));
+                    }
+                }
+            }
+        });
+    }
+
+    @Override
+    public void handle(RemoveEntitySubscriberMessage message) {
+        ExternalServer server = getOrCreateServer(message.server);
+
+        MultiPaper.runSync(() -> {
+            ChunkAccess chunk = MultiPaper.getChunkAccess(message.world, message.cx, message.cz);
+            if (chunk instanceof LevelChunk levelChunk) {
+                levelChunk.externalEntitiesSubscribers.remove(server);
+            } else {
+                LOGGER.warn("Received an entities unsubscribe notification for an unloaded chunk " + message.world + ";" + message.cx + ";" + message.cz);
+            }
+        });
+    }
+
+    @Override
+    public void handle(EntitySubscribersSyncMessage message) {
+        HashSet<ExternalServer> servers = new HashSet<>();
+        for (String subscriber : message.subscribers) {
+            servers.add(getOrCreateServer(subscriber));
+        }
+
+        MultiPaper.runSync(() -> {
+            ChunkAccess chunk = MultiPaper.getChunkAccess(message.world, message.cx, message.cz);
+            if (chunk instanceof LevelChunk levelChunk) {
+                levelChunk.externalEntitiesSubscribers.clear();
+                levelChunk.externalEntitiesSubscribers.addAll(servers);
+            } else {
+                LOGGER.warn("Received an entities subscribe sync notification for an unloaded chunk " + message.world + ";" + message.cx + ";" + message.cz);
+            }
+        });
+    }
 }
diff --git a/src/main/java/puregero/multipaper/MultiPaperEntitiesHandler.java b/src/main/java/puregero/multipaper/MultiPaperEntitiesHandler.java
new file mode 100644
index 0000000000000000000000000000000000000000..f997ed6f246b310ea5c0e09f7aff979a1d9f6eea
--- /dev/null
+++ b/src/main/java/puregero/multipaper/MultiPaperEntitiesHandler.java
@@ -0,0 +1,352 @@
+package puregero.multipaper;
+
+import com.mojang.datafixers.util.Pair;
+import net.minecraft.core.BlockPos;
+import net.minecraft.network.protocol.Packet;
+import net.minecraft.network.protocol.game.*;
+import net.minecraft.network.syncher.SynchedEntityData;
+import net.minecraft.server.level.ChunkMap;
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.server.level.ServerPlayer;
+import net.minecraft.world.entity.*;
+import net.minecraft.world.entity.ai.attributes.AttributeInstance;
+import net.minecraft.world.entity.ai.attributes.AttributeModifier;
+import net.minecraft.world.entity.decoration.ArmorStand;
+import net.minecraft.world.entity.decoration.LeashFenceKnotEntity;
+import net.minecraft.world.entity.player.Player;
+import net.minecraft.world.entity.projectile.FireworkRocketEntity;
+import net.minecraft.world.entity.projectile.FishingHook;
+import net.minecraft.world.entity.vehicle.AbstractMinecart;
+import net.minecraft.world.item.ItemStack;
+import net.minecraft.world.level.ChunkPos;
+import net.minecraft.world.level.chunk.ChunkAccess;
+import net.minecraft.world.level.chunk.LevelChunk;
+import net.minecraft.world.phys.Vec3;
+import org.apache.commons.lang.ArrayUtils;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import puregero.multipaper.externalserverprotocol.*;
+import puregero.multipaper.mastermessagingprotocol.messages.masterbound.UnsubscribeEntitiesMessage;
+import puregero.multipaper.mastermessagingprotocol.messages.masterbound.WillSaveEntitiesLaterMessage;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class MultiPaperEntitiesHandler {
+
+    private static final Logger LOGGER = LogManager.getLogger(MultiPaperEntitiesHandler.class.getSimpleName());
+    public static boolean removingEntity = false;
+    public static boolean takingItem = false;
+
+    public static Entity getControllingPassenger(Entity entity) {
+        if (entity instanceof AbstractMinecart) {
+            // Because Minecarts are special and the passenger doesn't 'technically' control them
+            return entity.getFirstPassenger();
+        }
+        return entity.getControllingPassenger();
+    }
+
+    /**
+     * @return true if this entity should be ticked, false if it will be ticked
+     *         by another server.
+     */
+    public static boolean tickEntity(Entity entity) {
+        if (MultiPaper.isRealPlayer(entity) || MultiPaper.isRealPlayer(getControllingPassenger(entity))) {
+            return true;
+        }
+
+        if (MultiPaper.isExternalPlayer(entity) || MultiPaper.isExternalPlayer(getControllingPassenger(entity))) {
+            return false;
+        }
+
+        LevelChunk chunk = entity.level.getChunkIfLoaded(entity.blockPosition());
+        if (entity instanceof FireworkRocketEntity fireworkRocket
+                && fireworkRocket.attachedToEntity instanceof ServerPlayer
+                && !MultiPaper.isRealPlayer(fireworkRocket.attachedToEntity)
+                && fireworkRocket.attachedToEntity.level == fireworkRocket.level
+                && fireworkRocket.position().distanceToSqr(fireworkRocket.attachedToEntity.position()) < 32 * 32) {
+            // Let the server that owns the player with the fireworkRocket tick it (as long as they probably have this chunk loaded)
+            return false;
+        } else if (!MultiPaper.isChunkLocal(chunk)
+                && !(entity instanceof FishingHook)
+                && !(entity instanceof FireworkRocketEntity fireworkRocket && MultiPaper.isRealPlayer(fireworkRocket.attachedToEntity))) {
+            if (entity instanceof ArmorStand armorStand) {
+                boolean temp = armorStand.canTick;
+                armorStand.canTick = false;
+                armorStand.tick();
+                armorStand.canTick = temp;
+            }
+
+            if (entity instanceof LivingEntity livingEntity) {
+                if (MultiPaper.isChunkExternal(chunk)) {
+                    livingEntity.setNoActionTime(0);
+                } else {
+                    livingEntity.setNoActionTime(livingEntity.getNoActionTime() + 1);
+                    livingEntity.checkDespawn();
+                }
+            }
+
+            return false;
+        }
+
+        return true;
+    }
+
+    public static void onEntitiesUnload(ServerLevel level, ChunkPos pos) {
+        MultiPaper.getConnection().send(new UnsubscribeEntitiesMessage(level.convertable.getLevelId(), pos.x, pos.z));
+
+        // Clear our cache of other servers that are subscribed to this chunk
+        ChunkAccess chunk = MultiPaper.getChunkAccess(level.convertable.getLevelId(), pos.x, pos.z);
+        if (chunk instanceof LevelChunk levelChunk) {
+            levelChunk.externalEntitiesSubscribers.clear();
+        }
+    }
+
+    public static void willWriteEntities(ServerLevel level, ChunkPos pos) {
+        MultiPaper.getConnection().send(new WillSaveEntitiesLaterMessage(level.convertable.getLevelId(), pos.x, pos.z));
+    }
+
+    public static void onChunkMove(Entity entity, BlockPos to, BlockPos from) {
+        if (from.equals(BlockPos.ZERO)) return; // They just spawned
+        if (!entity.shouldBeSaved() && !(entity.isVehicle() && entity.hasExactlyOnePlayerPassenger())) return; // Entity shouldn't be synced (eg players)
+
+        LevelChunk chunkFrom = entity.level.getChunkIfLoaded(from);
+        LevelChunk chunkTo = entity.level.getChunkIfLoaded(to);
+
+        if (chunkFrom == null || chunkTo == null) {
+            return;
+        }
+
+        if (MultiPaper.isChunkLocal(chunkFrom)) {
+            if (!MultiPaper.isChunkLocal(chunkTo)) {
+                // Leaving our jurisdiction, do a full entity update to ensure the new external server has all the required info
+                MultiPaper.runSync(() -> MultiPaper.broadcastPacketToExternalServers(chunkTo.externalEntitiesSubscribers, () -> new EntityUpdateNBTPacket(entity)));
+            }
+            for (ExternalServer fromServer : chunkFrom.externalEntitiesSubscribers) {
+                if (fromServer.getConnection() != null && !chunkTo.externalEntitiesSubscribers.contains(fromServer)) {
+                    // Entity is leaving another server's area, make sure they know this
+                    MultiPaper.runSync(() -> fromServer.getConnection().send(new EntityUpdatePacket(entity, new ClientboundTeleportEntityPacket(entity))));
+                }
+            }
+            for (ExternalServer toServer : chunkTo.externalEntitiesSubscribers) {
+                if (toServer.getConnection() != null && !chunkFrom.externalEntitiesSubscribers.contains(toServer)) {
+                    // Entity is entering another server's area, send them the full entity
+                    MultiPaper.runSync(() -> {
+                        MultiPaper.broadcastPacketToExternalServers(chunkTo.externalEntitiesSubscribers, () -> new EntityUpdateNBTPacket(entity));
+                        if (entity.isVehicle() && entity.hasExactlyOnePlayerPassenger()) {
+                            MultiPaper.broadcastPacketToExternalServers(chunkTo.externalEntitiesSubscribers, () -> new EntityUpdateWithDependenciesPacket(entity, entity.getPassengers(), new ClientboundSetPassengersPacket(entity)));
+                        }
+                    });
+                }
+            }
+        }
+    }
+
+    private static void setRemovedRecursive(Entity entity) {
+        for (Entity passenger : entity.getPassengers()) {
+            if (!(passenger instanceof ServerPlayer)) {
+                setRemovedRecursive(passenger);
+            }
+        }
+        entity.setRemoved(Entity.RemovalReason.UNLOADED_TO_CHUNK);
+    }
+
+    public static void handleEntityUpdate(ExternalServerConnection connection, Entity entity, Packet<?> packet) {
+        if (packet instanceof ClientboundMoveEntityPacket moveEntityPacket) {
+            Vec3 vector = moveEntityPacket.updateEntityPosition(entity.position());
+            if (!(entity instanceof ServerPlayer) && !((ServerLevel) entity.level).entityManager.areEntitiesLoaded(new ChunkPos(new BlockPos(vector)).longKey)) {
+                setRemovedRecursive(entity);
+                return;
+            }
+            entity.preserveMotion = true;
+            setFallDistance(entity, vector.y);
+            if (moveEntityPacket.hasRotation()) {
+                entity.moveTo(vector.x, vector.y, vector.z, moveEntityPacket.getyRot() * 360f / 256, moveEntityPacket.getxRot() * 360f / 256);
+            } else {
+                // Include y-rot and x-rot, as without it, it teleports players
+                entity.moveTo(vector.x, vector.y, vector.z, entity.getYRot(), entity.getXRot());
+            }
+            entity.onGround = moveEntityPacket.isOnGround();
+        } else if (packet instanceof ClientboundTeleportEntityPacket teleportEntityPacket) {
+            if (!(entity instanceof ServerPlayer) &&!((ServerLevel) entity.level).entityManager.areEntitiesLoaded(new ChunkPos(new BlockPos(teleportEntityPacket.getX(), teleportEntityPacket.getY(), teleportEntityPacket.getZ())).longKey)) {
+                setRemovedRecursive(entity);
+                return;
+            }
+            entity.preserveMotion = true;
+            setFallDistance(entity, teleportEntityPacket.getY());
+            entity.moveTo(teleportEntityPacket.getX(), teleportEntityPacket.getY(), teleportEntityPacket.getZ(), teleportEntityPacket.getyRot() * 360f / 256, teleportEntityPacket.getxRot() * 360f / 256);
+            entity.onGround = teleportEntityPacket.isOnGround();
+        } else if (packet instanceof ClientboundSetEntityMotionPacket setEntityMotionPacket) {
+            entity.setDeltaMovement(setEntityMotionPacket.getXa() / 8000.0D, setEntityMotionPacket.getYa() / 8000.0D, setEntityMotionPacket.getZa() / 8000.0D);
+        } else if (packet instanceof ClientboundRotateHeadPacket rotateHeadPacket) {
+            entity.setYHeadRot(rotateHeadPacket.getYHeadRot() * 360f / 256);
+        } else if (packet instanceof ClientboundSetEntityDataPacket setEntityDataPacket) {
+            if (entity instanceof ExternalPlayer) {
+                ((ExternalPlayer) entity).updatingData = true;
+            }
+            if (setEntityDataPacket.getUnpackedData() != null) {
+                for (SynchedEntityData.DataItem item : setEntityDataPacket.getUnpackedData()) {
+                    if (item.getAccessor().equals(LivingEntity.DATA_HEALTH_ID) && entity instanceof LivingEntity livingEntity) {
+                        // Dumb CraftBukkit needs us to set the health using setHealth instead of simply updating the entity data
+                        livingEntity.setHealth((Float) item.getValue());
+                    } else {
+                        entity.getEntityData().set(item.getAccessor(), item.getValue());
+                    }
+                }
+            } else {
+                LOGGER.warn("ClientboundSetEntityDataPacket.getUnpackedData() was null");
+            }
+            if (entity instanceof ExternalPlayer) {
+                ((ExternalPlayer) entity).updatingData = false;
+            }
+        } else if (packet instanceof ClientboundUpdateAttributesPacket updateAttributesPacket) {
+            for (ClientboundUpdateAttributesPacket.AttributeSnapshot snapshot : updateAttributesPacket.getValues()) {
+                AttributeInstance instance = ((LivingEntity) entity).getAttribute(snapshot.getAttribute());
+                instance.setBaseValue(snapshot.getBase());
+                instance.removeModifiers();
+                for (AttributeModifier modifier : snapshot.getModifiers()) {
+                    instance.addPermanentModifier(modifier);
+                }
+            }
+        } else if (packet instanceof ClientboundAnimatePacket animatePacket) {
+            ChunkMap.TrackedEntity trackedEntity = ((ServerLevel) entity.level).chunkSource.chunkMap.entityMap.get(entity.getId());
+            if (trackedEntity != null) {
+                trackedEntity.broadcast(new ClientboundAnimatePacket(entity, animatePacket.getAction()));
+            } else {
+                LOGGER.warn(entity + " has no TrackedEntity!");
+            }
+        } else if (packet instanceof ClientboundEntityEventPacket entityEventPacket) {
+            ChunkMap.TrackedEntity trackedEntity = ((ServerLevel) entity.level).chunkSource.chunkMap.entityMap.get(entity.getId());
+            if (trackedEntity != null) {
+                trackedEntity.broadcast(new ClientboundEntityEventPacket(entity, entityEventPacket.getEventId()));
+            } else {
+                LOGGER.warn(entity + " has no TrackedEntity!");
+            }
+        } else if (packet instanceof ClientboundSetEquipmentPacket setEquipmentPacket) {
+            for (Pair<EquipmentSlot, ItemStack> pair : setEquipmentPacket.getSlots()) {
+                entity.setItemSlot(pair.getFirst(), pair.getSecond());
+            }
+            if (entity instanceof LivingEntity livingEntity) {
+                livingEntity.detectEquipmentUpdates();
+            }
+        } else {
+            LOGGER.warn("Unhandled packet " + packet);
+        }
+    }
+
+    private static void setFallDistance(Entity entity, double newY) {
+        double oldY = entity.getY();
+
+        if (newY >= oldY) {
+            entity.fallDistance = 0;
+        } else {
+            entity.fallDistance += oldY - newY;
+        }
+    }
+
+    public static void handleEntityWithDependenicesUpdate(Entity entity, Entity[] entities, Packet<?> packet) {
+        if (packet instanceof ClientboundSetPassengersPacket setPassengersPacket) {
+            for (Entity riding : entity.getPassengers()) {
+                if (!ArrayUtils.contains(entities, riding)) {
+                    riding.stopRiding();
+                }
+            }
+            for (Entity passenger : entities) {
+                if (!entity.getPassengers().contains(passenger)) {
+                    passenger.startRiding(entity, true);
+                }
+            }
+        } else if (packet instanceof ClientboundSetEntityLinkPacket setEntityLinkPacket) {
+            if (entities.length == 0) {
+                ((Mob) entity).setLeashedTo(null, true);
+            } else {
+                ((Mob) entity).setLeashedTo(entities[0], true);
+            }
+        } else if (packet instanceof ClientboundTakeItemEntityPacket takeItemEntityPacket) {
+            takingItem = true;
+            ((LivingEntity) entities[0]).take(entity, takeItemEntityPacket.getAmount());
+            takingItem = false;
+        } else {
+            LOGGER.warn("Unhandled dependencies packet " + packet);
+        }
+    }
+
+    public static void onEntitySpawn(Entity entity) {
+        if (!shouldSyncEntity(entity)) return;
+
+        MultiPaper.runSync(() -> { // Run this after the entity has finished spawning
+            if (entity.isRemoved()) {
+                return;
+            }
+
+            LevelChunk chunk = entity.level.getChunkIfLoaded(entity.blockPosition());
+            if (chunk != null) {
+                MultiPaper.broadcastPacketToExternalServers(chunk.externalEntitiesSubscribers, () -> new EntityUpdateNBTPacket(entity));
+            } else {
+                LOGGER.warn(entity + " spawned in an unloaded chunk, broadcasting it to all servers just incase anyone has it loaded");
+                MultiPaper.broadcastPacketToExternalServers(new EntityUpdateNBTPacket(entity));
+            }
+        });
+    }
+
+    public static boolean shouldSyncEntity(Entity entity) {
+        return entity.shouldBeSaved() || entity instanceof LightningBolt || entity instanceof LeashFenceKnotEntity;
+    }
+
+    public static void onEntityRemove(Entity entity, Entity.RemovalReason reason) {
+        if (!shouldSyncEntity(entity) && MultiPaperEntitiesHandler.getControllingPassenger(entity) == null && !(entity instanceof Player && reason == Entity.RemovalReason.KILLED)) return;
+        if (removingEntity) return;
+        if (reason == Entity.RemovalReason.UNLOADED_TO_CHUNK || reason == Entity.RemovalReason.UNLOADED_WITH_PLAYER) return;
+
+        LevelChunk chunk = entity.level.getChunkIfLoaded(entity.blockPosition());
+        if (chunk != null) {
+            MultiPaper.broadcastPacketToExternalServers(chunk.externalEntitiesSubscribers, () -> new EntityRemovePacket(entity));
+        } else {
+            LOGGER.warn(entity + " removed in an unloaded chunk");
+        }
+    }
+
+    public static void onEntityUpdate(Entity entity, Packet<?> packet) {
+        if (!entity.shouldBeSaved() && !(entity instanceof ServerPlayer) && (entity.getPassengers().isEmpty() || entity.getPassengers().stream().noneMatch(e -> e instanceof ServerPlayer))) return;
+
+        LevelChunk chunk = entity.level.getChunkIfLoaded(entity.blockPosition());
+
+        if (packet instanceof ClientboundSetEquipmentPacket && entity instanceof ServerPlayer) {
+            // This is handled with inventories for players
+            return;
+        } else if (packet instanceof ClientboundSetPassengersPacket setPassengersPacket) {
+            List<Entity> entities = new ArrayList<>();
+            for (int id : setPassengersPacket.getPassengers()) {
+                entities.add(entity.level.getEntity(id));
+            }
+            MultiPaper.broadcastPacketToExternalServers(chunk.externalEntitiesSubscribers, () -> new EntityUpdateWithDependenciesPacket(entity, entities, packet));
+            return;
+        } else if (packet instanceof ClientboundSetEntityLinkPacket setEntityLinkPacket) {
+            List<Entity> entities = new ArrayList<>();
+            entities.add(entity.level.getEntity(setEntityLinkPacket.getDestId()));
+            MultiPaper.broadcastPacketToExternalServers(chunk.externalEntitiesSubscribers, () -> new EntityUpdateWithDependenciesPacket(entity, entities, packet));
+            return;
+        } else if (packet instanceof ClientboundTakeItemEntityPacket takeItemEntityPacket) {
+            List<Entity> entities = new ArrayList<>();
+            entities.add(entity.level.getEntity(takeItemEntityPacket.getPlayerId()));
+            MultiPaper.broadcastPacketToExternalServers(chunk.externalEntitiesSubscribers, () -> new EntityUpdateWithDependenciesPacket(entity, entities, packet));
+            return;
+        }
+
+        if (packet instanceof ClientboundBlockUpdatePacket) {
+            MultiPaperChunkHandler.onBlockUpdate(chunk.playerChunk, packet);
+            return;
+        }
+
+        if (MultiPaper.isRealPlayer(entity)) {
+            MultiPaper.broadcastPacketToExternalServers(new EntityUpdatePacket(entity, packet));
+            return;
+        }
+
+        if (chunk != null) {
+            MultiPaper.broadcastPacketToExternalServers(chunk.externalEntitiesSubscribers, () -> new EntityUpdatePacket(entity, packet));
+        } else {
+            LOGGER.warn("onEntityUpdate was called for an unloaded chunk " + entity);
+        }
+    }
+}
diff --git a/src/main/java/puregero/multipaper/MultiPaperPlayerHandler.java b/src/main/java/puregero/multipaper/MultiPaperPlayerHandler.java
new file mode 100644
index 0000000000000000000000000000000000000000..a69c0ab8a07a32020946489acf97b9bd1e22778d
--- /dev/null
+++ b/src/main/java/puregero/multipaper/MultiPaperPlayerHandler.java
@@ -0,0 +1,21 @@
+package puregero.multipaper;
+
+import net.minecraft.network.protocol.game.ServerboundClientInformationPacket;
+import net.minecraft.network.protocol.game.ServerboundPlayerAbilitiesPacket;
+import net.minecraft.network.protocol.game.ServerboundSetCarriedItemPacket;
+import net.minecraft.server.level.ServerPlayer;
+import puregero.multipaper.externalserverprotocol.PlayerActionPacket;
+
+public class MultiPaperPlayerHandler {
+    public static void handlePlayerAbilities(ServerPlayer player, ServerboundPlayerAbilitiesPacket packet) {
+        if (MultiPaper.isRealPlayer(player)) {
+            MultiPaper.broadcastPacketToExternalServers(new PlayerActionPacket(player, packet));
+        }
+    }
+
+    public static void handleClientInformation(ServerPlayer player, ServerboundClientInformationPacket packet) {
+        if (MultiPaper.isRealPlayer(player)) {
+            MultiPaper.broadcastPacketToExternalServers(new PlayerActionPacket(player, packet));
+        }
+    }
+}
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/EntityRemovePacket.java b/src/main/java/puregero/multipaper/externalserverprotocol/EntityRemovePacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..219d4f75fb195fe936b5fa647829e753e9ef1363
--- /dev/null
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/EntityRemovePacket.java
@@ -0,0 +1,69 @@
+package puregero.multipaper.externalserverprotocol;
+
+import net.minecraft.network.FriendlyByteBuf;
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.world.entity.Entity;
+import net.minecraft.world.entity.player.Player;
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.CraftWorld;
+import org.bukkit.craftbukkit.scheduler.CraftScheduler;
+import puregero.multipaper.ExternalServerConnection;
+import puregero.multipaper.MultiPaper;
+import puregero.multipaper.MultiPaperEntitiesHandler;
+
+import java.util.HashMap;
+import java.util.UUID;
+
+public class EntityRemovePacket extends ExternalServerPacket {
+
+    public static final HashMap<UUID, Entity.RemovalReason> removedEntities = new HashMap<>();
+
+    private final String world;
+    private final UUID uuid;
+
+    public EntityRemovePacket(Entity entity) {
+        this(((ServerLevel) entity.level).convertable.getLevelId(), entity.getUUID());
+    }
+
+    public EntityRemovePacket(String world, UUID uuid) {
+        this.world = world;
+        this.uuid = uuid;
+    }
+
+    public EntityRemovePacket(FriendlyByteBuf in) {
+        this.world = in.readUtf();
+        this.uuid = in.readUUID();
+    }
+
+    @Override
+    public void write(FriendlyByteBuf out) {
+        out.writeUtf(world);
+        out.writeUUID(uuid);
+    }
+
+    @Override
+    public void handle(ExternalServerConnection connection) {
+        MultiPaper.runSync(() -> {
+            ServerLevel level = ((CraftWorld) Bukkit.getWorld(world)).getHandle();
+            Entity entity = level.entityManager.knownUuids.get(uuid);
+            if (entity != null) {
+                MultiPaperEntitiesHandler.removingEntity = true;
+                entity.setRemoved(entity instanceof Player ? Entity.RemovalReason.KILLED : Entity.RemovalReason.DISCARDED);
+                MultiPaperEntitiesHandler.removingEntity = false;
+            } else {
+                setEntityRemoved(uuid, Entity.RemovalReason.DISCARDED);
+            }
+        });
+    }
+
+    public static void setEntityRemoved(UUID uuid, Entity.RemovalReason reason) {
+        setEntityRemoved(uuid, reason, 300);
+    }
+
+    public static void setEntityRemoved(UUID uuid, Entity.RemovalReason reason, int durationInTicks) {
+        removedEntities.put(uuid, reason);
+        ((CraftScheduler) Bukkit.getScheduler()).scheduleInternalTask(() -> {
+            removedEntities.remove(uuid, reason);
+        }, durationInTicks, "EntityRemovePacket-removeEntryFromRemovedEntities");
+    }
+}
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/EntityUpdateNBTPacket.java b/src/main/java/puregero/multipaper/externalserverprotocol/EntityUpdateNBTPacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..9e411127484733e2022f3f8b1cd7ed24400df0e8
--- /dev/null
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/EntityUpdateNBTPacket.java
@@ -0,0 +1,125 @@
+package puregero.multipaper.externalserverprotocol;
+
+import net.minecraft.nbt.CompoundTag;
+import net.minecraft.nbt.ListTag;
+import net.minecraft.network.FriendlyByteBuf;
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.server.level.ServerPlayer;
+import net.minecraft.world.entity.Entity;
+import net.minecraft.world.entity.EntityType;
+import net.minecraft.world.entity.Mob;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import org.bukkit.Bukkit;
+import org.bukkit.World;
+import org.bukkit.craftbukkit.CraftWorld;
+import puregero.multipaper.ExternalServerConnection;
+import puregero.multipaper.MultiPaper;
+
+import java.io.IOException;
+import java.util.UUID;
+
+public class EntityUpdateNBTPacket extends ExternalServerPacket {
+
+    private static final Logger LOGGER = LogManager.getLogger(EntityUpdateNBTPacket.class.getSimpleName());
+
+    private final String world;
+    private final UUID uuid;
+    private final byte[] data;
+
+    public EntityUpdateNBTPacket(Entity entity) {
+        this.world = ((ServerLevel) entity.level).convertable.getLevelId();
+        this.uuid = entity.getUUID();
+
+        CompoundTag tag = new CompoundTag();
+
+        entity.isSyncing = true;
+        entity.save(tag);
+        entity.isSyncing = false;
+
+        if (tag.getAllKeys().isEmpty()) {
+            new Exception("Sending an empty entity " + entity).printStackTrace();
+        }
+
+        try {
+            this.data = MultiPaper.nbtToBytes(tag);
+        } catch (IOException e) {
+            throw new RuntimeException(e);
+        }
+    }
+
+    public EntityUpdateNBTPacket(FriendlyByteBuf in) {
+        this.world = in.readUtf();
+        this.uuid = in.readUUID();
+        this.data = in.readByteArray();
+    }
+
+    @Override
+    public void write(FriendlyByteBuf out) {
+        out.writeUtf(world);
+        out.writeUUID(uuid);
+        out.writeByteArray(data);
+    }
+
+    @Override
+    public void handle(ExternalServerConnection connection) {
+        MultiPaper.runSync(() -> {
+            try {
+                World bukkitWorld = Bukkit.getWorld(world);
+
+                if (bukkitWorld instanceof CraftWorld craftWorld) {
+                    ServerLevel level = craftWorld.getHandle();
+                    CompoundTag tag = MultiPaper.nbtFromBytes(data);
+                    loadEntity(level, tag, uuid);
+                }
+            } catch (IOException e) {
+                e.printStackTrace();
+            }
+        });
+    }
+
+    public Entity loadEntity(ServerLevel level, CompoundTag tag, UUID uuid) {
+        Entity.RemovalReason removalReason = EntityRemovePacket.removedEntities.get(uuid);
+        if (removalReason != null && removalReason.shouldDestroy()) {
+            // We've already removed this entity. This is likely a race condition, so don't recreate the entity.
+            return null;
+        }
+
+        Entity entity = level.entityManager.knownUuids.get(uuid);
+
+        if (entity == null) {
+            entity = EntityType.loadEntityRecursive(tag, level, entity2 -> {
+                if (level.entityManager.isPending(entity2.chunkPosition().longKey) || level.entityManager.areEntitiesLoaded(entity2.chunkPosition().longKey)) {
+                    level.entityManager.addNewEntity(entity2);
+                    if (entity2 instanceof Mob mob) mob.restoreLeashFromSave();
+                    return entity2;
+                } else {
+                    EntityRemovePacket.setEntityRemoved(uuid, Entity.RemovalReason.UNLOADED_TO_CHUNK, 20);
+                    LOGGER.warn("Tried to create an entity from nbt, but the entities for that chunk aren't loaded: " + entity2);
+                    return null;
+                }
+            });
+        } else if (entity instanceof ServerPlayer player) {
+            new Exception("Tried to update the nbt of player " + player.getScoreboardName() + " to " + tag).printStackTrace();
+        } else {
+            entity.load(tag);
+        }
+
+        if (tag.contains("Passengers", 9)) {
+            ListTag nbttaglist = tag.getList("Passengers", 10);
+
+            for (int i = 0; i < nbttaglist.size(); ++i) {
+                CompoundTag passengerTag = nbttaglist.getCompound(i);
+                Entity passenger = loadEntity(level, passengerTag, passengerTag.getUUID("UUID"));
+
+                if (passenger != null) {
+                    passenger.startRiding(entity, true);
+                }
+            }
+        }
+
+        if (entity instanceof Mob mob) mob.restoreLeashFromSave();
+
+        return entity;
+    }
+}
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/EntityUpdatePacket.java b/src/main/java/puregero/multipaper/externalserverprotocol/EntityUpdatePacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..2ff68d25f4dd3c917f9bc074802f74c338eb0f90
--- /dev/null
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/EntityUpdatePacket.java
@@ -0,0 +1,95 @@
+package puregero.multipaper.externalserverprotocol;
+
+import io.netty.buffer.ByteBuf;
+import io.netty.buffer.Unpooled;
+import net.minecraft.network.ConnectionProtocol;
+import net.minecraft.network.FriendlyByteBuf;
+import net.minecraft.network.protocol.Packet;
+import net.minecraft.network.protocol.PacketFlow;
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.world.entity.Entity;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import org.bukkit.Bukkit;
+import org.bukkit.World;
+import org.bukkit.craftbukkit.CraftWorld;
+import org.bukkit.craftbukkit.scheduler.CraftScheduler;
+import puregero.multipaper.ExternalServerConnection;
+import puregero.multipaper.MultiPaper;
+import puregero.multipaper.MultiPaperEntitiesHandler;
+
+import java.util.UUID;
+
+public class EntityUpdatePacket extends ExternalServerPacket {
+
+    private static final Logger LOGGER = LogManager.getLogger(EntityUpdatePacket.class.getSimpleName());
+
+    private final UUID world;
+    private final UUID uuid;
+    private final Packet<?> packet;
+
+    public EntityUpdatePacket(Entity entity, Packet<?> packet) {
+        this.world = ((ServerLevel) entity.level).uuid;
+        this.uuid = entity.getUUID();
+        this.packet = packet;
+    }
+
+    public EntityUpdatePacket(FriendlyByteBuf in) {
+        world = in.readUUID();
+        uuid = in.readUUID();
+
+        ByteBuf buf = Unpooled.wrappedBuffer(in.readByteArray());
+        FriendlyByteBuf friendlyByteBuf = new FriendlyByteBuf(buf);
+        int packetId = friendlyByteBuf.readVarInt();
+        packet = ConnectionProtocol.PLAY.createPacket(PacketFlow.CLIENTBOUND, packetId, friendlyByteBuf);
+    }
+
+    @Override
+    public void write(FriendlyByteBuf out) {
+        out.writeUUID(world);
+        out.writeUUID(uuid);
+
+        ConnectionProtocol protocol = ConnectionProtocol.getProtocolForPacket(packet);
+        Integer id = protocol.getPacketId(PacketFlow.CLIENTBOUND, packet);
+        ByteBuf buf = Unpooled.buffer();
+        FriendlyByteBuf friendlyByteBuf = new FriendlyByteBuf(buf);
+        friendlyByteBuf.writeVarInt(id);
+        packet.write(friendlyByteBuf);
+        out.writeByteArray(buf.array());
+    }
+
+    @Override
+    public void handle(ExternalServerConnection connection) {
+        MultiPaper.runSync(() -> handleLater(connection, 0));
+    }
+
+    private void handleLater(ExternalServerConnection connection, int depth) {
+        World bukkitWorld = Bukkit.getWorld(world);
+
+        if (bukkitWorld instanceof CraftWorld craftWorld) {
+            ServerLevel level = craftWorld.getHandle();
+            Entity entity = level.entityManager.knownUuids.get(uuid);
+
+            if (entity == null) {
+                if (EntityRemovePacket.removedEntities.containsKey(uuid)) {
+                    return;
+                }
+
+                // If we can't find the entity, try again later,
+                // the spawn entity packet is probably coming later
+                if (depth > 5) {
+                    LOGGER.warn("Could not find entity " + uuid + " for " + packet.getClass().getSimpleName() + ", requesting it");
+                    connection.send(new RequestEntityPacket(world, uuid));
+                    return;
+                }
+
+                ((CraftScheduler) Bukkit.getScheduler()).scheduleInternalTask(() -> {
+                    handleLater(connection, depth + 1);
+                }, 1, "EntityUpdatePacket-handleLaters");
+                return;
+            }
+
+            MultiPaperEntitiesHandler.handleEntityUpdate(connection, entity, packet);
+        }
+    }
+}
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/EntityUpdateWithDependenciesPacket.java b/src/main/java/puregero/multipaper/externalserverprotocol/EntityUpdateWithDependenciesPacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..65ab90524dd61bf14d7a7ca1f84ca316b383ce8e
--- /dev/null
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/EntityUpdateWithDependenciesPacket.java
@@ -0,0 +1,133 @@
+package puregero.multipaper.externalserverprotocol;
+
+import io.netty.buffer.ByteBuf;
+import io.netty.buffer.Unpooled;
+import net.minecraft.network.ConnectionProtocol;
+import net.minecraft.network.FriendlyByteBuf;
+import net.minecraft.network.protocol.Packet;
+import net.minecraft.network.protocol.PacketFlow;
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.world.entity.Entity;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import org.bukkit.Bukkit;
+import org.bukkit.World;
+import org.bukkit.craftbukkit.CraftWorld;
+import org.bukkit.craftbukkit.scheduler.CraftScheduler;
+import puregero.multipaper.ExternalServerConnection;
+import puregero.multipaper.MultiPaper;
+import puregero.multipaper.MultiPaperEntitiesHandler;
+
+import java.util.Collection;
+import java.util.Objects;
+import java.util.UUID;
+
+public class EntityUpdateWithDependenciesPacket extends ExternalServerPacket {
+
+    private static final Logger LOGGER = LogManager.getLogger(EntityUpdateWithDependenciesPacket.class.getSimpleName());
+
+    private final UUID world;
+    private final UUID uuid;
+    private final UUID[] uuids;
+    private final Packet<?> packet;
+
+    public EntityUpdateWithDependenciesPacket(Entity entity, Collection<Entity> dependents, Packet<?> packet) {
+        this.world = ((ServerLevel) entity.level).uuid;
+        this.uuid = entity.getUUID();
+        this.uuids = dependents.stream().filter(Objects::nonNull).map(Entity::getUUID).toArray(UUID[]::new);
+        this.packet = packet;
+    }
+
+    public EntityUpdateWithDependenciesPacket(FriendlyByteBuf in) {
+        world = in.readUUID();
+        uuid = in.readUUID();
+
+        uuids = new UUID[in.readVarInt()];
+
+        for (int i = 0; i < uuids.length; i++) {
+            uuids[i] = in.readUUID();
+        }
+
+        ByteBuf buf = Unpooled.wrappedBuffer(in.readByteArray());
+        FriendlyByteBuf friendlyByteBuf = new FriendlyByteBuf(buf);
+        int packetId = friendlyByteBuf.readVarInt();
+        packet = ConnectionProtocol.PLAY.createPacket(PacketFlow.CLIENTBOUND, packetId, friendlyByteBuf);
+    }
+
+    @Override
+    public void write(FriendlyByteBuf out) {
+        out.writeUUID(world);
+        out.writeUUID(uuid);
+
+        out.writeVarInt(uuids.length);
+        for (UUID uuid : uuids) {
+            out.writeUUID(uuid);
+        }
+
+        ConnectionProtocol protocol = ConnectionProtocol.getProtocolForPacket(packet);
+        Integer id = protocol.getPacketId(PacketFlow.CLIENTBOUND, packet);
+        ByteBuf buf = Unpooled.buffer();
+        FriendlyByteBuf friendlyByteBuf = new FriendlyByteBuf(buf);
+        friendlyByteBuf.writeVarInt(id);
+        packet.write(friendlyByteBuf);
+        out.writeByteArray(buf.array());
+    }
+
+    @Override
+    public void handle(ExternalServerConnection connection) {
+        MultiPaper.runSync(() -> handleLater(connection, 0));
+    }
+
+    private void handleLater(ExternalServerConnection connection, int depth) {
+        World bukkitWorld = Bukkit.getWorld(world);
+
+        if (bukkitWorld instanceof CraftWorld craftWorld) {
+            ServerLevel level = craftWorld.getHandle();
+            Entity entity = level.entityManager.knownUuids.get(uuid);
+
+            if (entity == null) {
+                if (EntityRemovePacket.removedEntities.containsKey(uuid)) {
+                    return;
+                }
+
+                // If we can't find the entity, try again later,
+                // the spawn entity packet is probably coming later
+                if (depth > 5) {
+                    LOGGER.warn("Could not find entity " + uuid + " for " + packet.getClass().getSimpleName() + ", requesting it");
+                    connection.send(new RequestEntityPacket(world, uuid));
+                    return;
+                }
+
+                ((CraftScheduler) Bukkit.getScheduler()).scheduleInternalTask(() -> {
+                    handleLater(connection, depth + 1);
+                }, 1, "EntityUpdateWithDependenciesPacket-handleLater");
+                return;
+            }
+
+            Entity[] entities = new Entity[uuids.length];
+
+            for (int i = 0; i < uuids.length; i++) {
+                entities[i] = level.entityManager.knownUuids.get(uuids[i]);
+
+                if (entities[i] == null) {
+                    if (EntityRemovePacket.removedEntities.containsKey(uuids[i])) {
+                        return;
+                    }
+
+                    if (depth > 5) {
+                        LOGGER.warn("Could not find dependent entity " + uuids[i] + " for " + packet.getClass().getSimpleName() + ", requesting it");
+                        connection.send(new RequestEntityPacket(world, uuids[i]));
+                        return;
+                    }
+
+                    ((CraftScheduler) Bukkit.getScheduler()).scheduleInternalTask(() -> {
+                        handleLater(connection, depth + 1);
+                    }, 1, "EntityUpdateWithDependenciesPacket-handleLater");
+                    return;
+                }
+            }
+
+            MultiPaperEntitiesHandler.handleEntityWithDependenicesUpdate(entity, entities, packet);
+        }
+    }
+}
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java b/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java
index c41679ee4e55cc5765d30acb4289be79291a9624..8ce98e04ed1400146b69242a3a28c9689fd47e68 100644
--- a/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java
@@ -35,6 +35,13 @@ public class ExternalServerPacketSerializer {
         addPacket(PlayerActionPacket.class, PlayerActionPacket::new);
         addPacket(PlayerInventoryUpdatePacket.class, PlayerInventoryUpdatePacket::new);
         addPacket(TimeUpdatePacket.class, TimeUpdatePacket::new);
+        addPacket(RequestEntitiesPacket.class, RequestEntitiesPacket::new);
+        addPacket(SendEntitiesPacket.class, SendEntitiesPacket::new);
+        addPacket(EntityUpdateNBTPacket.class, EntityUpdateNBTPacket::new);
+        addPacket(EntityUpdatePacket.class, EntityUpdatePacket::new);
+        addPacket(EntityUpdateWithDependenciesPacket.class, EntityUpdateWithDependenciesPacket::new);
+        addPacket(RequestEntityPacket.class, RequestEntityPacket::new);
+        addPacket(EntityRemovePacket.class, EntityRemovePacket::new);
     }
 
     private static void addPacket(Class<? extends ExternalServerPacket> clazz, Function<FriendlyByteBuf, ExternalServerPacket> deserializer) {
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/PlayerActionPacket.java b/src/main/java/puregero/multipaper/externalserverprotocol/PlayerActionPacket.java
index 2e51741d76d2d209accb673f8043ed99010125a3..fd2a81936f4fb19534d165ea96f88cc6c2065b4f 100644
--- a/src/main/java/puregero/multipaper/externalserverprotocol/PlayerActionPacket.java
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/PlayerActionPacket.java
@@ -12,6 +12,7 @@ import net.minecraft.server.level.ServerPlayer;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 import puregero.multipaper.ExternalServerConnection;
+import puregero.multipaper.MultiPaper;
 
 import java.util.UUID;
 
@@ -51,13 +52,15 @@ public class PlayerActionPacket extends ExternalServerPacket {
 
     @Override
     public void handle(ExternalServerConnection connection) {
-        ServerPlayer player = MinecraftServer.getServer().getPlayerList().getPlayer(uuid);
+        MultiPaper.runSync(() -> {
+            ServerPlayer player = MinecraftServer.getServer().getPlayerList().getPlayer(uuid);
 
-        if (player == null) {
-            LOGGER.warn("Tried to run an action on a non-existent player with uuid " + uuid);
-            return;
-        }
+            if (player == null) {
+                LOGGER.warn("Tried to run an action on a non-existent player with uuid " + uuid);
+                return;
+            }
 
-        player.server.execute(() -> action.handle(player.connection));
+            action.handle(player.connection);
+        });
     }
 }
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/PlayerCreatePacket.java b/src/main/java/puregero/multipaper/externalserverprotocol/PlayerCreatePacket.java
index 349947413153eccb076f6d752f32198b32f55f14..e5a2546adf05a2ca52d1514ce2e82fd70d3c7750 100644
--- a/src/main/java/puregero/multipaper/externalserverprotocol/PlayerCreatePacket.java
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/PlayerCreatePacket.java
@@ -2,9 +2,14 @@ package puregero.multipaper.externalserverprotocol;
 
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.protocol.game.ServerboundSetCarriedItemPacket;
+import net.minecraft.network.protocol.game.ClientboundSetEntityDataPacket;
+import net.minecraft.network.protocol.game.ClientboundSetPassengersPacket;
+import net.minecraft.network.protocol.game.ServerboundClientInformationPacket;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.level.ServerPlayer;
+import net.minecraft.world.entity.HumanoidArm;
 import net.minecraft.world.level.GameType;
+import net.minecraft.world.level.chunk.LevelChunk;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 import org.bukkit.event.player.PlayerKickEvent;
@@ -13,6 +18,7 @@ import puregero.multipaper.*;
 import java.net.InetAddress;
 import java.net.InetSocketAddress;
 import java.net.UnknownHostException;
+import java.util.Arrays;
 import java.util.UUID;
 
 public class PlayerCreatePacket extends ExternalServerPacket {
@@ -117,8 +123,33 @@ public class PlayerCreatePacket extends ExternalServerPacket {
 
         send(new PlayerCreatePacket(player), connections);
         send(new PlayerActionPacket(player, new ServerboundSetCarriedItemPacket(player.getInventory().selected)), connections);
+        send(new EntityUpdatePacket(player, new ClientboundSetEntityDataPacket(player.getId(), player.getEntityData().getAll())), connections);
 
         MultiPaperInventoryHandler.sendFullInventoryUpdate(player, connections);
         MultiPaperEnderChestHandler.sendFullEnderChestUpdate(player, connections);
+
+        if (player.clientViewDistance != null) {
+            send(new PlayerActionPacket(player, new ServerboundClientInformationPacket(
+                    player.locale,
+                    player.clientViewDistance,
+                    player.getChatVisibility(),
+                    player.canChatInColor(),
+                    player.getEntityData().get(ServerPlayer.DATA_PLAYER_MODE_CUSTOMISATION),
+                    player.getEntityData().get(ServerPlayer.DATA_PLAYER_MAIN_HAND) == 0 ? HumanoidArm.LEFT : HumanoidArm.RIGHT,
+                    player.isTextFilteringEnabled(),
+                    player.allowsListing()
+            )), connections);
+        }
+
+        if (player.getVehicle() != null) {
+            LevelChunk levelChunk = player.getVehicle().level.getChunkAt(player.getVehicle().blockPosition());
+            if (levelChunk != null) {
+                ExternalServerConnection[] subscribedServers = Arrays.stream(connections).filter(e -> levelChunk.externalEntitiesSubscribers.contains(e.externalServer)).toArray(ExternalServerConnection[]::new);
+                if (subscribedServers.length > 0) {
+                    send(new EntityUpdateNBTPacket(player.getVehicle()), subscribedServers);
+                    send(new EntityUpdateWithDependenciesPacket(player.getVehicle(), player.getVehicle().getPassengers(), new ClientboundSetPassengersPacket(player.getVehicle())), subscribedServers);
+                }
+            }
+        }
     }
 }
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/RequestEntitiesPacket.java b/src/main/java/puregero/multipaper/externalserverprotocol/RequestEntitiesPacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..cb6d153158d5de470582b66f9253fde25e1545f0
--- /dev/null
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/RequestEntitiesPacket.java
@@ -0,0 +1,68 @@
+package puregero.multipaper.externalserverprotocol;
+
+import net.minecraft.network.FriendlyByteBuf;
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.world.level.ChunkPos;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.CraftWorld;
+import org.bukkit.craftbukkit.scheduler.CraftScheduler;
+import puregero.multipaper.ExternalServerConnection;
+import puregero.multipaper.MultiPaper;
+
+import java.util.ConcurrentModificationException;
+
+public class RequestEntitiesPacket extends ExternalServerPacket {
+
+    private static final Logger LOGGER = LogManager.getLogger(RequestEntitiesPacket.class.getSimpleName());
+
+    private final String world;
+    private final int cx;
+    private final int cz;
+
+    public RequestEntitiesPacket(String world, int cx, int cz) {
+        this.world = world;
+        this.cx = cx;
+        this.cz = cz;
+    }
+
+    public RequestEntitiesPacket(FriendlyByteBuf in) {
+        world = in.readUtf();
+        cx = in.readInt();
+        cz = in.readInt();
+    }
+
+    @Override
+    public void write(FriendlyByteBuf out) {
+        out.writeUtf(world);
+        out.writeInt(cx);
+        out.writeInt(cz);
+    }
+
+    @Override
+    public void handle(ExternalServerConnection connection) {
+        sendChunkLater(connection, world, cx, cz, 0);
+    }
+
+    private void sendChunkLater(ExternalServerConnection connection, String world, int cx, int cz, int depth) {
+        ServerLevel level = ((CraftWorld) Bukkit.getWorld(world)).getHandle();
+        if (!level.entityManager.areEntitiesLoaded(ChunkPos.asLong(cx, cz))) {
+            if (depth == 20 || Bukkit.isStopping()) {
+                LOGGER.warn(connection.externalServer.getName() + " is requesting entities " + world + "," + cx + "," + cz + " but we timed out waiting for them to load.");
+                connection.send(new SendEntitiesPacket(world, cx, cz, null));
+                return;
+            }
+            ((CraftScheduler) Bukkit.getScheduler()).scheduleInternalTask(() -> {
+                sendChunkLater(connection, world, cx, cz, depth + 1);
+            }, 1, "ExternalServerConnection-sendEntitiesLater");
+        } else {
+            try {
+                connection.send(new SendEntitiesPacket(level, new ChunkPos(cx, cz)));
+            } catch (ConcurrentModificationException e) {
+                LOGGER.warn("Got ConcurrentModificationException while sending entities, sending it in main thread instead");
+                MultiPaper.runSync(() -> sendChunkLater(connection, world, cx, cz, depth));
+            }
+        }
+    }
+}
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/RequestEntityPacket.java b/src/main/java/puregero/multipaper/externalserverprotocol/RequestEntityPacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..e4c047bb0cf665baeabed982d1e310076e49dfd4
--- /dev/null
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/RequestEntityPacket.java
@@ -0,0 +1,88 @@
+package puregero.multipaper.externalserverprotocol;
+
+import net.minecraft.network.FriendlyByteBuf;
+import net.minecraft.network.protocol.game.ClientboundSetPassengersPacket;
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.server.level.ServerPlayer;
+import net.minecraft.world.entity.Entity;
+import org.apache.commons.lang3.tuple.Pair;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.CraftWorld;
+import puregero.multipaper.ExternalServerConnection;
+import puregero.multipaper.MultiPaper;
+
+import java.util.Map;
+import java.util.UUID;
+import java.util.concurrent.CompletableFuture;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.TimeUnit;
+
+public class RequestEntityPacket extends ExternalServerPacket {
+
+    private static final Logger LOGGER = LogManager.getLogger(RequestEntityPacket.class.getSimpleName());
+
+    private final UUID world;
+    private final UUID uuid;
+
+    public RequestEntityPacket(UUID world, UUID uuid) {
+        this.world = world;
+        this.uuid = uuid;
+    }
+
+    public RequestEntityPacket(FriendlyByteBuf in) {
+        this.world = in.readUUID();
+        this.uuid = in.readUUID();
+    }
+
+    @Override
+    public void write(FriendlyByteBuf out) {
+        out.writeUUID(world);
+        out.writeUUID(uuid);
+    }
+
+    private static final Map<Pair<UUID, ExternalServerConnection>, Integer> playerRequestCounts = new ConcurrentHashMap<>();
+
+    @Override
+    public void handle(ExternalServerConnection connection) {
+        MultiPaper.runSync(() -> {
+            ServerLevel level = ((CraftWorld) Bukkit.getWorld(world)).getHandle();
+            Entity entity = level.entityManager.knownUuids.get(uuid);
+            if (entity != null) {
+                if (entity instanceof ServerPlayer serverPlayer) {
+                    triedToRequestPlayer(connection, serverPlayer);
+                    return;
+                }
+
+                // Send the vehicle the entity is in
+                while (entity.getVehicle() != null && !entity.shouldBeSaved()) {
+                    entity = entity.getVehicle();
+                }
+
+                connection.send(new EntityUpdateNBTPacket(entity));
+
+                if (!entity.getPassengers().isEmpty()) {
+                    connection.send(new EntityUpdateWithDependenciesPacket(entity, entity.getPassengers(), new ClientboundSetPassengersPacket(entity)));
+                }
+            } else {
+                LOGGER.warn(connection.externalServer.getName() + " requested entity " + uuid + ", but that entity doesn't exist");
+            }
+        });
+    }
+
+    private void triedToRequestPlayer(ExternalServerConnection connection, ServerPlayer serverPlayer) {
+        Pair<UUID, ExternalServerConnection> key = Pair.of(serverPlayer.getUUID(), connection);
+        int count = playerRequestCounts.getOrDefault(key, 0);
+        playerRequestCounts.put(key, count + 1);
+
+        if (count > 10) {
+            LOGGER.error(connection.externalServer.getName() + " tried to request player " + serverPlayer.getScoreboardName() + " more than 10 times! This means they didn't sync correctly. Kicking them.");
+            serverPlayer.getBukkitEntity().kickPlayer("Your player failed to sync. Please reconnect.");
+            playerRequestCounts.remove(key);
+        } else {
+            LOGGER.warn(connection.externalServer.getName() + " tried to request entity " + uuid + ", which is the player " + serverPlayer.getScoreboardName() + "! This means that server is missing that player.");
+            CompletableFuture.runAsync(() -> playerRequestCounts.remove(key), CompletableFuture.delayedExecutor(10, TimeUnit.SECONDS));
+        }
+    }
+}
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/SendEntitiesPacket.java b/src/main/java/puregero/multipaper/externalserverprotocol/SendEntitiesPacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..493e0a44a9d4bd826deeea3af10ca5c924668cee
--- /dev/null
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/SendEntitiesPacket.java
@@ -0,0 +1,150 @@
+package puregero.multipaper.externalserverprotocol;
+
+import net.minecraft.SharedConstants;
+import net.minecraft.nbt.CompoundTag;
+import net.minecraft.nbt.IntArrayTag;
+import net.minecraft.nbt.ListTag;
+import net.minecraft.nbt.Tag;
+import net.minecraft.network.FriendlyByteBuf;
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.world.entity.Entity;
+import net.minecraft.world.entity.EntityType;
+import net.minecraft.world.level.ChunkPos;
+import net.minecraft.world.level.chunk.LevelChunk;
+import net.minecraft.world.level.entity.ChunkEntities;
+import net.minecraft.world.level.entity.EntityInLevelCallback;
+import net.minecraft.world.level.entity.PersistentEntitySectionManager;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.CraftWorld;
+import puregero.multipaper.ChunkKey;
+import puregero.multipaper.ExternalServerConnection;
+import puregero.multipaper.MultiPaper;
+import puregero.multipaper.MultiPaperEntitiesHandler;
+
+import java.io.ByteArrayInputStream;
+import java.io.DataInputStream;
+import java.io.IOException;
+import java.util.List;
+import java.util.function.Consumer;
+import java.util.stream.Collectors;
+import java.util.zip.InflaterInputStream;
+
+public class SendEntitiesPacket extends ExternalServerPacket {
+
+    private static final Logger LOGGER = LogManager.getLogger(SendEntitiesPacket.class.getSimpleName());
+
+    private final String world;
+    private final int cx;
+    private final int cz;
+    private final byte[] data;
+
+    public SendEntitiesPacket(LevelChunk chunk) {
+        this(chunk.level, chunk.getPos());
+    }
+
+    public SendEntitiesPacket(ServerLevel level, ChunkPos pos) {
+        this(level.convertable.getLevelId(), pos.x, pos.z, getEntites(level, pos));
+    }
+
+    private static CompoundTag getEntites(ServerLevel level, ChunkPos pos) {
+        if (!level.entityManager.areEntitiesLoaded(pos.longKey)) {
+            LOGGER.warn("Entities are not loaded in " + level.convertable.getLevelId() + pos + ", sending null entities");
+            return null;
+        }
+        CompoundTag entitiesRoot = new CompoundTag();
+        ListTag entities = new ListTag();
+        for (Entity entity : level.entityManager.getEntities(pos)) {
+            if (MultiPaperEntitiesHandler.shouldSyncEntity(entity)) {
+                CompoundTag tag = new CompoundTag();
+                entity.isSyncing = true;
+                entity.save(tag);
+                entity.isSyncing = false;
+                entities.add(tag);
+            }
+        }
+        entitiesRoot.putInt("DataVersion", SharedConstants.getCurrentVersion().getWorldVersion());
+        entitiesRoot.put("Entities", entities);
+        entitiesRoot.put("Position", new IntArrayTag(new int[]{pos.x, pos.z}));
+        return entitiesRoot;
+    }
+
+    public SendEntitiesPacket(String world, int cx, int cz, CompoundTag tag) {
+        this.world = world;
+        this.cx = cx;
+        this.cz = cz;
+
+        try {
+            if (tag == null) {
+                data = new byte[0];
+            } else {
+                data = MultiPaper.nbtToBytes(tag);
+            }
+        } catch (IOException e) {
+            throw new RuntimeException(e);
+        }
+    }
+
+    public SendEntitiesPacket(FriendlyByteBuf in) {
+        world = in.readUtf();
+        cx = in.readInt();
+        cz = in.readInt();
+        data = in.readByteArray();
+    }
+
+    @Override
+    public void write(FriendlyByteBuf out) {
+        out.writeUtf(world);
+        out.writeInt(cx);
+        out.writeInt(cz);
+        out.writeByteArray(data);
+    }
+
+    @Override
+    public void handle(ExternalServerConnection connection) {
+        try {
+            Consumer<DataInputStream> callback = connection.entitiesCallbacks.remove(new ChunkKey(world, cx, cz));
+            if (callback != null) {
+                if (data.length == 0) {
+                    LOGGER.warn(connection.externalServer.getName() + " sent us an empty entities for " + world + "," + cx + "," + cz + ", force loading it from disk");
+                    MultiPaper.forceReadChunk(world, "entities", cx, cz).thenAccept(data2 -> callback.accept(data2.length == 0 ? null : new DataInputStream(new InflaterInputStream(new ByteArrayInputStream(data2)))));
+                } else {
+                    callback.accept(new DataInputStream(new ByteArrayInputStream(data)));
+                }
+            } else {
+                if (data.length == 0) {
+                    return;
+                }
+
+                // Replace the existing entities with these new entities
+                ChunkPos pos = new ChunkPos(cx, cz);
+                ServerLevel level = ((CraftWorld) Bukkit.getWorld(world)).getHandle();
+                // Check that we have these entities loaded in the first place
+                if (level.entityManager.chunkLoadStatuses.containsKey(pos.longKey)) {
+                    CompoundTag tag = MultiPaper.nbtFromBytes(data);
+                    ListTag entities = tag == null ? new ListTag() : tag.getList("Entities", Tag.TAG_COMPOUND);
+                    MultiPaper.runSync(() -> {
+                        // Remove existing entities in this chunk
+                        for (Entity entity : level.entityManager.getEntities(new ChunkPos(cx, cz))) {
+                            if (entity.shouldBeSaved()) {
+                                entity.getPassengersAndSelf().forEach(e -> {
+                                    e.setRemoved(Entity.RemovalReason.UNLOADED_TO_CHUNK);
+                                    e.setLevelCallback(EntityInLevelCallback.NULL);
+                                });
+                            }
+                        }
+                        // Add our entities to be loaded
+                        List<Entity> list = EntityType.loadEntitiesRecursive(entities, level).collect(Collectors.toList());
+                        level.entityManager.chunkLoadStatuses.put(pos.longKey, PersistentEntitySectionManager.ChunkLoadStatus.PENDING);
+                        level.entityManager.loadingInbox.add(new ChunkEntities<>(pos, list));
+                    });
+                } else {
+                    LOGGER.warn("Unsolicited entities for " + world + "," + cx + "," + cz);
+                }
+            }
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+    }
+}
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/SendUpdatePacket.java b/src/main/java/puregero/multipaper/externalserverprotocol/SendUpdatePacket.java
index 01cbc324cb6c9e656cd7851d018d91c1e640b046..619ea03b58b41906d2c15c32a47047b3e8a8f3b9 100644
--- a/src/main/java/puregero/multipaper/externalserverprotocol/SendUpdatePacket.java
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/SendUpdatePacket.java
@@ -7,6 +7,7 @@ import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.network.protocol.PacketFlow;
 import net.minecraft.network.protocol.game.*;
+import net.minecraft.server.level.ServerLevel;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 import puregero.multipaper.ExternalServerConnection;
@@ -23,6 +24,11 @@ public class SendUpdatePacket extends ExternalServerPacket {
     private final UUID world;
     private final Packet<?> packet;
 
+    public SendUpdatePacket(ServerLevel level, Packet<?> packet) {
+        this.world = level.uuid;
+        this.packet = packet;
+    }
+
     public SendUpdatePacket(UUID world, Packet<?> packet) {
         this.world = world;
         this.packet = packet;
