From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Thu, 23 Jun 2022 19:13:45 +1000
Subject: [PATCH] Add option to disable checking chunk lighting on load

Disabling this can cause lighting issues when generating chunks,
but for pregenerated worlds, disabling this can reduce the number
of chunks being saved significantly.

diff --git a/src/main/java/net/minecraft/server/level/ChunkMap.java b/src/main/java/net/minecraft/server/level/ChunkMap.java
index ab28a7e3a5ca90e37d94ff7cd205ca71999946e6..5d4b2a1abc0ae0ab7f4197ddd0827618a25fcf6d 100644
--- a/src/main/java/net/minecraft/server/level/ChunkMap.java
+++ b/src/main/java/net/minecraft/server/level/ChunkMap.java
@@ -1322,7 +1322,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
         // Paper end - force competion on the main thread
     }
 
-    protected void releaseLightTicket(ChunkPos pos) {
+    public void releaseLightTicket(ChunkPos pos) {
         this.mainThreadExecutor.tell(Util.name(() -> {
             this.distanceManager.removeTicket(TicketType.LIGHT, pos, 33 + ChunkStatus.getDistance(ChunkStatus.LIGHT), pos);
         }, () -> {
diff --git a/src/main/java/net/minecraft/world/level/chunk/ChunkStatus.java b/src/main/java/net/minecraft/world/level/chunk/ChunkStatus.java
index e6240f891e396d91e31b02fdf3084be77e9d6697..9953eda10576bddd45c520c6306b80f7a70ee176 100644
--- a/src/main/java/net/minecraft/world/level/chunk/ChunkStatus.java
+++ b/src/main/java/net/minecraft/world/level/chunk/ChunkStatus.java
@@ -26,6 +26,7 @@ import net.minecraft.world.level.levelgen.GenerationStep;
 import net.minecraft.world.level.levelgen.Heightmap;
 import net.minecraft.world.level.levelgen.blending.Blender;
 import net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplateManager;
+import puregero.multipaper.MultiPaperConfig;
 
 public class ChunkStatus {
 
@@ -157,7 +158,14 @@ public class ChunkStatus {
     public static final ChunkStatus LIGHT = ChunkStatus.register("light", ChunkStatus.FEATURES, 1, ChunkStatus.POST_FEATURES, ChunkStatus.ChunkType.PROTOCHUNK, (chunkstatus, executor, worldserver, chunkgenerator, structuretemplatemanager, lightenginethreaded, function, list, ichunkaccess, flag) -> {
         return ChunkStatus.lightChunk(chunkstatus, lightenginethreaded, ichunkaccess);
     }, (chunkstatus, worldserver, structuretemplatemanager, lightenginethreaded, function, ichunkaccess) -> {
-        return ChunkStatus.lightChunk(chunkstatus, lightenginethreaded, ichunkaccess);
+        // MultiPaper start
+        if (MultiPaperConfig.checkChunkLightingOnLoad) {
+            return ChunkStatus.lightChunk(chunkstatus, lightenginethreaded, ichunkaccess);
+        } else {
+            worldserver.chunkSource.chunkMap.releaseLightTicket(ichunkaccess.chunkPos);
+            return CompletableFuture.completedFuture(Either.left(ichunkaccess));
+        }
+        // MultiPaper end
     });
     public static final ChunkStatus SPAWN = ChunkStatus.registerSimple("spawn", ChunkStatus.LIGHT, 0, ChunkStatus.POST_FEATURES, ChunkStatus.ChunkType.PROTOCHUNK, (chunkstatus, worldserver, chunkgenerator, list, ichunkaccess) -> {
         if (!ichunkaccess.isUpgrading()) {
