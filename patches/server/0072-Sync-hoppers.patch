From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Sat, 4 Dec 2021 18:34:35 +1000
Subject: [PATCH] Sync hoppers


diff --git a/src/main/java/net/minecraft/world/level/block/entity/HopperBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/HopperBlockEntity.java
index 4398ca9b53340fbb926f2ca14fc3af9c747bdb1d..9de538478654a3e80133d4e01efc5c683ffc9562 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/HopperBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/HopperBlockEntity.java
@@ -37,6 +37,7 @@ import org.bukkit.entity.HumanEntity;
 import org.bukkit.event.inventory.InventoryMoveItemEvent;
 import org.bukkit.event.inventory.InventoryPickupItemEvent;
 import org.bukkit.inventory.Inventory;
+import puregero.multipaper.MultiPaperContainerHandler;
 // CraftBukkit end
 
 public class HopperBlockEntity extends RandomizableContainerBlockEntity implements Hopper {
@@ -251,7 +252,7 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
                         origItemStack.setCount(origCount - moved + remaining);
                     }
                     hopper.setItem(i, origItemStack);
-                    destination.setChanged();
+                    hopper.setChanged(); // destination.setChanged(); // MultiPaper - redundant to have destination, handled in addItem, changed to hopper
                     return true;
                 }
                 origItemStack.setCount(origCount);
@@ -611,6 +612,7 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
 
     private static ItemStack tryMoveInItem(@Nullable Container from, Container to, ItemStack stack, int slot, @Nullable Direction side) {
         ItemStack itemstack1 = to.getItem(slot);
+        int startingStackSize = itemstack1.getCount(); // MultiPaper
 
         if (HopperBlockEntity.canPlaceItemInContainer(to, stack, slot, side)) {
             boolean flag = false;
@@ -657,6 +659,7 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
                     }
                 }
 
+                if (!MultiPaperContainerHandler.increaseItemExternal(to, slot, to.getItem(slot), to.getItem(slot).getCount() - startingStackSize)) // MultiPaper - don't change external containers
                 to.setChanged();
             }
         }
diff --git a/src/main/java/puregero/multipaper/MultiPaperContainerHandler.java b/src/main/java/puregero/multipaper/MultiPaperContainerHandler.java
new file mode 100644
index 0000000000000000000000000000000000000000..0aeeaeef5b05f493505dd1509f7c2582beabaa96
--- /dev/null
+++ b/src/main/java/puregero/multipaper/MultiPaperContainerHandler.java
@@ -0,0 +1,52 @@
+package puregero.multipaper;
+
+import net.minecraft.world.CompoundContainer;
+import net.minecraft.world.Container;
+import net.minecraft.world.entity.Entity;
+import net.minecraft.world.item.ItemStack;
+import net.minecraft.world.level.block.ComposterBlock;
+import net.minecraft.world.level.block.entity.BlockEntity;
+import net.minecraft.world.level.chunk.LevelChunk;
+import puregero.multipaper.externalserverprotocol.AddItemToContainerPacket;
+import puregero.multipaper.externalserverprotocol.AddItemToEntityContainerPacket;
+
+public class MultiPaperContainerHandler {
+    public static boolean increaseItemExternal(Container to, int slot, ItemStack stack, int count) {
+        if (to instanceof Entity entity) {
+            LevelChunk chunk = entity.getLevel().getChunkIfLoaded(entity.blockPosition());
+            if (MultiPaper.isChunkExternal(chunk)) {
+                stack = stack.copy();
+                stack.setCount(count);
+                chunk.externalOwner.getConnection().send(new AddItemToEntityContainerPacket(entity, slot, stack));
+
+                return true;
+            } else {
+                return false;
+            }
+        }
+
+        if (to instanceof ComposterBlock.InputContainer || to instanceof ComposterBlock.OutputContainer || to instanceof ComposterBlock.EmptyContainer) {
+            // It doesn't really matter if we modify composters across servers (which might even be impossible anyways)
+            return false;
+        }
+
+        BlockEntity block;
+
+        if (to instanceof CompoundContainer) {
+            block = (BlockEntity) ((CompoundContainer) to).container1;
+        } else {
+            block = (BlockEntity) to;
+        }
+
+        LevelChunk chunk = block.getLevel().getChunkIfLoaded(block.getBlockPos());
+        if (MultiPaper.isChunkExternal(chunk)) {
+            stack = stack.copy();
+            stack.setCount(count);
+            chunk.externalOwner.getConnection().send(new AddItemToContainerPacket(block, slot, stack));
+
+            return true;
+        } else {
+            return false;
+        }
+    }
+}
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/AddItemToContainerPacket.java b/src/main/java/puregero/multipaper/externalserverprotocol/AddItemToContainerPacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..ae6f4392e2a2633486ddb7381adb4d52437ebc24
--- /dev/null
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/AddItemToContainerPacket.java
@@ -0,0 +1,82 @@
+package puregero.multipaper.externalserverprotocol;
+
+import net.minecraft.core.BlockPos;
+import net.minecraft.core.Direction;
+import net.minecraft.nbt.CompoundTag;
+import net.minecraft.network.FriendlyByteBuf;
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.world.Container;
+import net.minecraft.world.entity.item.ItemEntity;
+import net.minecraft.world.item.ItemStack;
+import net.minecraft.world.level.block.entity.BlockEntity;
+import net.minecraft.world.level.block.entity.HopperBlockEntity;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.CraftWorld;
+import puregero.multipaper.ExternalServerConnection;
+import puregero.multipaper.MultiPaper;
+
+import java.io.IOException;
+
+public class AddItemToContainerPacket extends ExternalServerPacket {
+
+    private static final Logger LOGGER = LogManager.getLogger(AddItemToContainerPacket.class.getSimpleName());
+
+    private final String world;
+    private final BlockPos pos;
+    private final int slot;
+    private final ItemStack itemStack;
+
+    public AddItemToContainerPacket(BlockEntity blockEntity, int slot, ItemStack itemStack) {
+        this.world = ((ServerLevel) blockEntity.getLevel()).convertable.getLevelId();
+        this.pos = blockEntity.getBlockPos();
+        this.slot = slot;
+        this.itemStack = itemStack;
+    }
+
+    public AddItemToContainerPacket(FriendlyByteBuf in) {
+        world = in.readUtf();
+        pos = BlockPos.of(in.readLong());
+        slot = in.readByte();
+
+        try {
+            itemStack = ItemStack.of(MultiPaper.nbtFromBytes(in.readByteArray()));
+        } catch (IOException e) {
+            throw new RuntimeException(e);
+        }
+    }
+
+    @Override
+    public void write(FriendlyByteBuf out) {
+        out.writeUtf(world);
+        out.writeLong(pos.asLong());
+        out.writeByte(slot);
+
+        try {
+            out.writeByteArray(MultiPaper.nbtToBytes(itemStack.save(new CompoundTag())));
+        } catch (IOException e) {
+            throw new RuntimeException(e);
+        }
+    }
+
+    @Override
+    public void handle(ExternalServerConnection connection) {
+        MultiPaper.runSync(() -> {
+            ServerLevel level = ((CraftWorld) Bukkit.getWorld(world)).getHandle();
+            Container container = HopperBlockEntity.getContainerAt(level, pos);
+
+            if (container == null) {
+                LOGGER.warn("Tried to set a " + itemStack + " in slot " + slot + " in a non-existant container at " + world + " " + pos);
+            } else {
+                // We can assume the item is being added from the side as it's cross servers, so any side direction such as north will do
+                ItemStack leftOver = HopperBlockEntity.addItem(null, container, itemStack, Direction.NORTH);
+                if (!leftOver.isEmpty()) {
+                    LOGGER.warn("There was a left over " + leftOver + " after adding an item to " + container.getClass().getSimpleName() + "@" + world + pos);
+                    ItemEntity item = new ItemEntity(level, pos.getX() + 0.5, pos.getY() + 1, pos.getZ() + 0.5, leftOver);
+                    level.addFreshEntity(item);
+                }
+            }
+        });
+    }
+}
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/AddItemToEntityContainerPacket.java b/src/main/java/puregero/multipaper/externalserverprotocol/AddItemToEntityContainerPacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..6a9eccfbb3b5f2eaab003b65f626340409d42233
--- /dev/null
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/AddItemToEntityContainerPacket.java
@@ -0,0 +1,82 @@
+package puregero.multipaper.externalserverprotocol;
+
+import net.minecraft.core.Direction;
+import net.minecraft.nbt.CompoundTag;
+import net.minecraft.network.FriendlyByteBuf;
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.world.Container;
+import net.minecraft.world.entity.Entity;
+import net.minecraft.world.entity.item.ItemEntity;
+import net.minecraft.world.item.ItemStack;
+import net.minecraft.world.level.block.entity.HopperBlockEntity;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.CraftWorld;
+import puregero.multipaper.ExternalServerConnection;
+import puregero.multipaper.MultiPaper;
+
+import java.io.IOException;
+import java.util.UUID;
+
+public class AddItemToEntityContainerPacket extends ExternalServerPacket {
+
+    private static final Logger LOGGER = LogManager.getLogger(AddItemToEntityContainerPacket.class.getSimpleName());
+
+    private final String world;
+    private final UUID uuid;
+    private final int slot;
+    private final ItemStack itemStack;
+
+    public AddItemToEntityContainerPacket(Entity entity, int slot, ItemStack itemStack) {
+        this.world = ((ServerLevel) entity.getLevel()).convertable.getLevelId();
+        this.uuid = entity.getUUID();
+        this.slot = slot;
+        this.itemStack = itemStack;
+    }
+
+    public AddItemToEntityContainerPacket(FriendlyByteBuf in) {
+        world = in.readUtf();
+        uuid = in.readUUID();
+        slot = in.readByte();
+
+        try {
+            itemStack = ItemStack.of(MultiPaper.nbtFromBytes(in.readByteArray()));
+        } catch (IOException e) {
+            throw new RuntimeException(e);
+        }
+    }
+
+    @Override
+    public void write(FriendlyByteBuf out) {
+        out.writeUtf(world);
+        out.writeUUID(uuid);
+        out.writeByte(slot);
+
+        try {
+            out.writeByteArray(MultiPaper.nbtToBytes(itemStack.save(new CompoundTag())));
+        } catch (IOException e) {
+            throw new RuntimeException(e);
+        }
+    }
+
+    @Override
+    public void handle(ExternalServerConnection connection) {
+        MultiPaper.runSync(() -> {
+            ServerLevel level = ((CraftWorld) Bukkit.getWorld(world)).getHandle();
+            Entity entity = level.getEntity(uuid);
+
+            if (entity instanceof Container container) {
+                // We can assume the item is being added from the side as it's cross servers, so any side direction such as north will do
+                ItemStack leftOver = HopperBlockEntity.addItem(null, container, itemStack, Direction.NORTH);
+                if (!leftOver.isEmpty()) {
+                    LOGGER.warn("There was a left over " + leftOver + " after adding an item to " + container);
+                    ItemEntity item = new ItemEntity(level, entity.getX(), entity.getY(), entity.getZ(), leftOver);
+                    level.addFreshEntity(item);
+                }
+            } else {
+                LOGGER.warn("Tried to set a " + itemStack + " in slot " + slot + " in a non-existent entity in " + world + " with uuid " + uuid + ": " + entity);
+            }
+        });
+    }
+}
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java b/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java
index aabc8ed6261846cbed62ab68c5d8ab8a135a0fed..4d4e58030f6783c6fec0e63835061df3ca85d7fa 100644
--- a/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java
@@ -45,6 +45,8 @@ public class ExternalServerPacketSerializer {
         addPacket(PlayerActionOnEntityPacket.class, PlayerActionOnEntityPacket::new);
         addPacket(PlayerTouchEntityPacket.class, PlayerTouchEntityPacket::new);
         addPacket(HurtEntityPacket.class, HurtEntityPacket::new);
+        addPacket(AddItemToEntityContainerPacket.class, AddItemToEntityContainerPacket::new);
+        addPacket(AddItemToContainerPacket.class, AddItemToContainerPacket::new);
     }
 
     private static void addPacket(Class<? extends ExternalServerPacket> clazz, Function<FriendlyByteBuf, ExternalServerPacket> deserializer) {
